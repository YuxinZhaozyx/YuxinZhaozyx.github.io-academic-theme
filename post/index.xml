<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on YuxinZhao</title>
    <link>https://YuxinZhaozyx.github.io/post/</link>
    <description>Recent content in Posts on YuxinZhao</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy; {year} YuxinZhao</copyright>
    <lastBuildDate>Thu, 04 Jul 2019 23:23:03 +0800</lastBuildDate>
    
	    <atom:link href="https://YuxinZhaozyx.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GoMicroBookshop项目开发笔记-1</title>
      <link>https://YuxinZhaozyx.github.io/post/gomicrobookshop-project/dev-note-1/</link>
      <pubDate>Thu, 04 Jul 2019 23:23:03 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/post/gomicrobookshop-project/dev-note-1/</guid>
      <description>

&lt;h2 id=&#34;第一章-用户服务&#34;&gt;第一章 用户服务&lt;/h2&gt;

&lt;p&gt;本章节我们实现用户服务，用户服务分为两层，web层（user-web）与服务层（user-srv），前者提供http接口，后者向web提供RPC服务。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user-web 以下简称&lt;strong&gt;web&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;user-srv 以下简称&lt;strong&gt;service&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;web&lt;/strong&gt;服务主要向用户提供如下接口&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;登录与token颁发&lt;/li&gt;
&lt;li&gt;鉴权&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们不提供注册接口，一来增加不必要的代码量，我们的核心还是介绍如何使用Micro组件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;server&lt;/strong&gt;服务主要向所有内部服务提供用户查询接口：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;根据userName用户名查询用户&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在开发应用之前，我们要先定义好命名空间。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;服务&lt;/th&gt;
&lt;th&gt;命名空间&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;接入层API&lt;/td&gt;
&lt;td&gt;mu.micro.book.web&lt;/td&gt;
&lt;td&gt;负责代理所有&lt;strong&gt;mu.micro.book.web&lt;/strong&gt;下游的web应用，比如&lt;strong&gt;mu.micro.book.web.user&lt;/strong&gt;等&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;用户web&lt;/td&gt;
&lt;td&gt;mu.micro.book.web.user&lt;/td&gt;
&lt;td&gt;接收API下放的路由为/user请求&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;用户服务&lt;/td&gt;
&lt;td&gt;mu.micro.book.srv.user&lt;/td&gt;
&lt;td&gt;对架构内应用提供user查询服务&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/raw/master/image/part1_framework_namespace.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;user-srv&#34;&gt;user-srv&lt;/h3&gt;

&lt;p&gt;user-srv的各组件如下表所示&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;启动顺序&lt;/th&gt;
&lt;th&gt;组件&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;basic&lt;/td&gt;
&lt;td&gt;初始化配置与解析配置文件，初始化数据库等基础组件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;model&lt;/td&gt;
&lt;td&gt;模型层，提供业务数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;handler&lt;/td&gt;
&lt;td&gt;接入层，提供对外接口，并向model层调用请求数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Micro有提供代码生成器指令&lt;a href=&#34;https://github.com/micro-in-cn/all-in-one/tree/master/middle-practices/micro-new&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/a&gt;，它可以新建服务模板代码，把基本所需的目录结构建好，省去大家挖坑的时间。&lt;/p&gt;

&lt;h4 id=&#34;新建模板&#34;&gt;新建模板&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;micro new --namespace=mu.micro.book --type=srv --alias=user github.com/YuxinZhaozyx/GoMicroBookshop/user-srv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;模板生成在&lt;strong&gt;user-srv&lt;/strong&gt;目录，其结构如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── main.go
├── plugin.go
├── handler
│   └── user.go
├── subscriber
│   └── user.go
├── proto/user
│   └── user.proto
├── Dockerfile
├── Makefile
└── README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改后&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── main.go
├── plugin.go
├── basic
│   └── config               * 配置类
│   │   └── config.go        * 初始化配置类
│   │   └── consul.go        * consul配置结构体
│   │   └── mysql.go         * mysql配置结构体
│   │   └── profiles.go      * 配置文件树辅助类
│   └── db                   * 数据库相关
│   │    └── db.go           * 初始化数据库
│   │    └── mysql.go        * mysql数据库相关
│   └── basic.go             * 初始化基础组件
├── conf                     * 配置文件目录
├── handler
│   └── user.go              * 将名称改为user
├── model                    * 增加模型层，用于与数据库交换数据
│   └── user                 * 用户模型类
│   │   └── user.go          * 初始化用户模型类
│   │   └── user_get.go      * 封装获取用户数据类业务
│   └── model.go             * 初始化模型层
├── proto/user    
│   └── user.proto           * 将名称改为user
├── Dockerfile
├── Makefile
└── README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;目录解释：basic, model, conf&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;basic, model 目录与micro无关，只是为了实现MVC架构。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;basic&lt;/strong&gt; 负责初始化基础组件，比如数据库、配置等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;model&lt;/strong&gt; 负责封装业务逻辑&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;conf&lt;/strong&gt; 配置文件目录，现在我们还没用配置中心，暂先用文件的方式&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;定义user原型&#34;&gt;定义User原型&lt;/h4&gt;

&lt;p&gt;在user.proto中定义User原型，暂且定义以下字段，足够登录，显示用户基本信息、异常信息即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax = &amp;quot;proto3&amp;quot;;

package mu.micro.book.srv.user;

service User {
    rpc QueryUserByName(Request) returns (Response) {}
}

message user {
    int64 id = 1;
    string name = 2;
    string pwd = 3;
    uint64 createTime = 4;
    uint64 updateTime = 5;
}

message Error {
    int32 code = 1;
    string detail = 2;
}

message Request {
    string userID = 1;
    string userName = 2;
    string userPwd = 3;
}

message Response {
    bool success = 1;
    Error error = 2;
    user user = 3;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面定义了User服务的基本原型结构，包含用户&lt;strong&gt;User&lt;/strong&gt;，请求&lt;strong&gt;Request&lt;/strong&gt;与响应结构&lt;strong&gt;Response&lt;/strong&gt;，还定义了查询用户的方法&lt;strong&gt;QueryUserByName&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;下面我们生成类型与服务方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;protoc --proto_path=. --go_out=. --micro_out=. proto/user/user.proto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行后会生成 proto/user/user.micro.go 和 proto/user/user.pb.go 两个文件。&lt;/p&gt;

&lt;h4 id=&#34;数据库与配置&#34;&gt;数据库与配置&lt;/h4&gt;

&lt;h5 id=&#34;创建user表&#34;&gt;创建User表&lt;/h5&gt;

&lt;p&gt;选用MySQL作为数据库，以下是建表语句&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE `micro_book_mall` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin */;
USE `micro_book_mall`;

CREATE TABLE `user`
(
    `id`           int(10) unsigned                                              NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,
    `user_id`      int(10) unsigned                                                       DEFAULT NULL COMMENT &#39;用户id&#39;,
    `user_name`    varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci  NOT NULL COMMENT &#39;用户名&#39;,
    `pwd`          varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT &#39;密码&#39;,
    `created_time` timestamp(3)                                                  NOT NULL DEFAULT CURRENT_TIMESTAMP(3),
    `updated_time` timestamp(3)                                                  NOT NULL DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3),
    PRIMARY KEY (`id`),
    UNIQUE KEY `user_user_name_uindex` (`user_name`),
    UNIQUE KEY `user_user_id_uindex` (`user_id`)
) ENGINE = InnoDB
  DEFAULT CHARSET = utf8mb4
  COLLATE = utf8mb4_bin COMMENT =&#39;用户表&#39;;

INSERT INTO user (user_id, user_name, pwd) VALUE (10001, &#39;micro&#39;, &#39;1234&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;基本组件配置&#34;&gt;基本组件配置&lt;/h5&gt;

&lt;p&gt;基础组件(basic)目前主要的功能是初始化配置与数据库。它的入口代码(basic/basic.go)是一个&lt;strong&gt;Init&lt;/strong&gt;初始化方法，负责初始化其下所有组件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package basic

import (
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/config&amp;quot;
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/db&amp;quot;
)

func Init() {
    config.Init()
    db.Init()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;配置config&#34;&gt;配置config&lt;/h5&gt;

&lt;p&gt;加载配置我们会使用到&lt;a href=&#34;https://github.com/micro/go-micro/config&#34; target=&#34;_blank&#34;&gt;go-config&lt;/a&gt;里面的本地文件配置。相关示例可以参考&lt;a href=&#34;https://github.com/micro-in-cn/all-in-one/tree/master/basic-practices/micro-config&#34; target=&#34;_blank&#34;&gt;go-config示例&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;配置文件在 conf/ 文件夹下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;application.yml         # 根配置文件
application-db.yml      # 数据库配置文件
application-consul.yml  # consul服务发现配置文件
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根配置文件application.yml如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app:
  profiles:
    include: consul, db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起名为&lt;strong&gt;application.yml&lt;/strong&gt;是参考了Spring-boot风格。我们把consul和db配置分到独立的文件中。&lt;/p&gt;

&lt;p&gt;通过解析&lt;code&gt;app.profiles.include&lt;/code&gt;来加载指定的配置文件。当然也可以全部写在&lt;strong&gt;application.yml&lt;/strong&gt;中，只是我觉得挤在一起的配置不优雅。&lt;/p&gt;

&lt;p&gt;初始化配置的过程大致如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;顺序&lt;/th&gt;
&lt;th&gt;过程&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;加载application.yml&lt;/td&gt;
&lt;td&gt;读取conf目录下application.yml文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;解析profiles属性&lt;/td&gt;
&lt;td&gt;如果有该属性则找到include值，该值就是指定需要引入的conf下的配置文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;解析include&lt;/td&gt;
&lt;td&gt;解析出include配置【值】，并组合成文件名，文件名规则为[application-值.yml]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;读取include声明文件&lt;/td&gt;
&lt;td&gt;读取配置文件值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;解析配置&lt;/td&gt;
&lt;td&gt;将配置文件中的值解析到配置对象中&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;以下是它的核心代码(basic/config/config.go)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Init 初始化配置
func Init() {
    m.Lock()
    defer m.Unlock()

    if inited {
        log.Logf(&amp;quot;[Init] 配置已经初始化过&amp;quot;)
        return
    }

    // 加载yml配置
    // 先加载基础配置
    appPath, _ := filepath.Abs(filepath.Dir(filepath.Join(&amp;quot;.&amp;quot;+sp, sp)))

    pt := filepath.Join(appPath, &amp;quot;conf&amp;quot;)
    os.Chdir(appPath)

    // 找到application.yml文件
    if err = config.Load(file.NewSource(file.WithPath(pt + sp + &amp;quot;application.yml&amp;quot;))); err != nil {
        panic(err)
    }

    // 找到需要引入的新配置文件
    if err = config.Get(defaultRootPath, &amp;quot;profiles&amp;quot;).Scan(&amp;amp;profiles); err != nil {
        panic(err)
    }

    log.Logf(&amp;quot;[Init] 加载配置文件：path: %s, %+v\n&amp;quot;, pt+sp+&amp;quot;application.yml&amp;quot;, profiles)

    // 开始导入新文件
    if len(profiles.GetInclude()) &amp;gt; 0 {
        include := strings.Split(profiles.GetInclude(), &amp;quot;,&amp;quot;)

        sources := make([]source.Source, len(include))
        for i := 0; i &amp;lt; len(include); i++ {
            filePath := pt + string(filepath.Separator) + defaultConfigFilePrefix + strings.TrimSpace(include[i]) + &amp;quot;.yml&amp;quot;

            log.Logf(&amp;quot;[Init] 加载配置文件：path: %s\n&amp;quot;, filePath)

            sources[i] = file.NewSource(file.WithPath(filePath))
        }

        // 加载include的文件
        if err = config.Load(sources...); err != nil {
            panic(err)
        }
    }

    // 赋值
    config.Get(defaultRootPath, &amp;quot;consul&amp;quot;).Scan(&amp;amp;consulConfig)
    config.Get(defaultRootPath, &amp;quot;mysql&amp;quot;).Scan(&amp;amp;mysqlConfig)

    // 标记已经初始化
    inited = true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们目前定义了三个配置结构，它们在basic的&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/user-srv/basic/config&#34; target=&#34;_blank&#34;&gt;config&lt;/a&gt;目录下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/user-srv/basic/config/profiles.go&#34; target=&#34;_blank&#34;&gt;profiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/user-srv/basic/config/consul.go&#34; target=&#34;_blank&#34;&gt;consul&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/user-srv/basic/config/mysql.go&#34; target=&#34;_blank&#34;&gt;mysql&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// defaultProfiles 属性配置文件
type defaultProfiles struct {
Include string `json:&amp;quot;include&amp;quot;`
}

// defaultConsulConfig 默认consul 配置
type defaultConsulConfig struct {
Enabled bool   `json:&amp;quot;enabled&amp;quot;`
Host    string `json:&amp;quot;host&amp;quot;`
Port    int    `json:&amp;quot;port&amp;quot;`
}

// defaultMysqlConfig mysql 配置
type defaultMysqlConfig struct {
URL               string `json:&amp;quot;url&amp;quot;`
Enable            bool   `json:&amp;quot;enabled&amp;quot;`
MaxIdleConnection int    `json:&amp;quot;maxIdleConnection&amp;quot;`
MaxOpenConnection int    `json:&amp;quot;maxOpenConnection&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;数据库初始化&#34;&gt;数据库初始化&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;// user-srv/basic/db/db.go
package db

import (
    &amp;quot;database/sql&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;sync&amp;quot;

    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/config&amp;quot;
    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;
)

var (
    inited bool
    mysqlDB *sql.DB
    m sync.RWMutex
)

// Init 初始化数据库
func Init() {
    m.Lock()
    defer m.Unlock()

    var err error
    
    if inited{
        err = fmt.Errorf(&amp;quot;[Init] db 已经初始化过了&amp;quot;)
        log.Logf(err.Error())
        return
    }

    // 如果配置声明使用mysql
    if config.GetMysqlConfig().GetEnabled(){
        initMysql()
    }

    inited = true
}

// GetDB 获取数据库
func GetDB() *sql.DB {
    return mysqlDB
}
// user-srv/basic/db/mysql.go
package db

import (
    &amp;quot;database/sql&amp;quot;

    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/config&amp;quot;
    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;
    
    _ &amp;quot;github.com/go-sql-driver/mysql&amp;quot;
)

func initMysql() {
    var err error

    // 创建连接
    mysqlDB, err = sql.Open(&amp;quot;mysql&amp;quot;, config.GetMysqlConfig().GetURL())
    if err != nil {
        log.Fatal(err)
        panic(err)
    }

    // 最大连接数
    mysqlDB.SetMaxOpenConns(config.GetMysqlConfig().GetMaxOpenConnection())

    // 最大闲置数
    mysqlDB.SetMaxIdleConns(config.GetMysqlConfig().GetMaxIdleConnection())

    // 激活链接
    if err = mysqlDB.Ping(); err != nil {
        log.Fatal(err)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;用户模型服务&#34;&gt;用户模型服务&lt;/h4&gt;

&lt;p&gt;/user-srv/model/user/user.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package user

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;sync&amp;quot;

    proto &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user&amp;quot;
)

var (
    s *service
    m sync.RWMutex
)

// service 服务
type service struct {
}

// Service 用户服务类
type Service interface {
    // QueryUserByName 根据用户名获取用户
    QueryUserByName(userName string) (ret *proto.User, err error)
}

// GetService 获取服务类
func GetService() (Service, error) {
    if s == nil {
        return nil, fmt.Errorf(&amp;quot;[GetService] GetService 未初始化&amp;quot;)
    }
    return s, nil
}

// Init 初始化用户服务层
func Init() {
    m.Lock()
    defer m.Unlock()

    if s != nil {
        return
    }

    s = &amp;amp;service{}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/user-srv/model/user/user_get.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package user

import (
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/db&amp;quot;
    proto &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user&amp;quot;
    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;
)

func (s *service) QueryUserByName(userName string) (ret *proto.User, err error) {
    queryString := `SELECT user_id, user_name, pwd FROM user WHERE user_name = ?`

    // 获取数据库
    o := db.GetDB()

    ret = &amp;amp;proto.User{}

    // 查询
    err = o.QueryRow(queryString, userName).Scan(&amp;amp;ret.Id, &amp;amp;ret.Name, &amp;amp;ret.Pwd)
    if err != nil {
        log.Logf(&amp;quot;[QueryUserByName] 查询数据失败， err: %s&amp;quot;, err)
        return
    }
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/user-srv/model/model.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package model

import &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/model/user&amp;quot;

// Init 初始化模型层
func Init() {
    user.Init()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;handler&#34;&gt;Handler&lt;/h4&gt;

&lt;p&gt;/user-srv/handler/user.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package handler

import (
    &amp;quot;context&amp;quot;

    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;

    model &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/model/user&amp;quot;
    proto &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user&amp;quot;
)

type Service struct{}

var (
    userService model.Service
)

// Init 初始化handler
func Init() {
    var err error
    userService, err = model.GetService()
    if err != nil {
        log.Fatal(&amp;quot;[Init] 初始化Handler错误&amp;quot;)
        return
    }
}

// QueryUserByName 通过参数中的名字返回用户
func (e *Service) QueryUserByName(ctx context.Context, req *proto.Request, rsp *proto.Response) error {
    user, err := userService.QueryUserByName(req.UserName)
    if err != nil {
        rsp.Success = false
        rsp.Error = &amp;amp;proto.Error{
            Code:   500,
            Detail: err.Error(),
        }

        return err
    }

    rsp.User = user
    rsp.Success = true
    return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;handler直接调用模型层方法获取数据并回传给rsp结构。&lt;/p&gt;

&lt;h4 id=&#34;main&#34;&gt;main&lt;/h4&gt;

&lt;p&gt;main.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;

    &amp;quot;github.com/micro/cli&amp;quot;
    &amp;quot;github.com/micro/go-micro&amp;quot;
    &amp;quot;github.com/micro/go-micro/registry&amp;quot;
    &amp;quot;github.com/micro/go-micro/registry/consul&amp;quot;
    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;

    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic&amp;quot;
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/config&amp;quot;
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/handler&amp;quot;
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/model&amp;quot;

    user &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user&amp;quot;
)

func main() {

    // 初始化配置、数据库等信息
    basic.Init()

    // 使用consul注册
    micReg := consul.NewRegistry(registryOptions)

    // New Service 新建服务
    service := micro.NewService(
        micro.Name(&amp;quot;mu.micro.book.srv.user&amp;quot;),
        micro.Registry(micReg),
        micro.Version(&amp;quot;latest&amp;quot;),
    )

    // Initialise service 初始化服务
    service.Init(
        micro.Action(func(c *cli.Context) {
            // 初始化模型层
            model.Init()
            // 初始化handler
            handler.Init()
        }),
    )

    // Register Handler 注册服务
    user.RegisterUserHandler(service.Server(), new(handler.Service))

    // Run service 启动服务
    if err := service.Run(); err != nil {
        log.Fatal(err)
    }
}

func registryOptions(ops *registry.Options) {
    consulCfg := config.GetConsulConfig()
    ops.Timeout = time.Second * 5
    ops.Addrs = []string{fmt.Sprintf(&amp;quot;%s:%d&amp;quot;, consulCfg.GetHost(), consulCfg.GetPort())}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码中我们默认使用consul作为注册中心，被在Action中初始化基础组件与模型层。&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    因为handler依赖model，所以初始化handler要在初始化模型层之后执行。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&#34;启动&#34;&gt;启动&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;启动consul&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;consul agent -dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;启动user-srv&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go run main.go plugin.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;2019/06/29 22:26:48 [Init] 加载配置文件：path: e:\go\src\github.com\YuxinZhaozyx\GoMicroBookshop\user-srv\conf\application.yml, {Include:consul, db}
2019/06/29 22:26:48 [Init] 加载配置文件：path: e:\go\src\github.com\YuxinZhaozyx\GoMicroBookshop\user-srv\conf\application-consul.yml
2019/06/29 22:26:48 [Init] 加载配置文件：path: e:\go\src\github.com\YuxinZhaozyx\GoMicroBookshop\user-srv\conf\application-db.yml
2019/06/29 22:26:48 Transport [http] Listening on [::]:56789
2019/06/29 22:26:48 Broker [http] Connected to [::]:56790
2019/06/29 22:26:48 Registry [consul] Registering node: mu.micro.book.srv.user-f51e60e1-cebf-4599-874c-8230d3113300
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;测试&#34;&gt;测试&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;micro --registry=consul call mu.micro.book.srv.user User.QueryUserByName &amp;quot;{\&amp;quot;userName\&amp;quot;: \&amp;quot;micro\&amp;quot;}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
        &amp;quot;success&amp;quot;: true,
        &amp;quot;user&amp;quot;: {
                &amp;quot;id&amp;quot;: 10001,
                &amp;quot;name&amp;quot;: &amp;quot;micro&amp;quot;,
                &amp;quot;pwd&amp;quot;: &amp;quot;1234&amp;quot;
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;user-srv服务搭建完成。&lt;/p&gt;

&lt;h3 id=&#34;user-web&#34;&gt;user-web&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;web&lt;/strong&gt;服务负责暴露接口给用户，用户请求登录，&lt;strong&gt;web&lt;/strong&gt;通过用户名&lt;strong&gt;userName&lt;/strong&gt;向&lt;strong&gt;service&lt;/strong&gt;获取用户信息，再比对密码，正确则登录成功，反之返回错误。&lt;/p&gt;

&lt;p&gt;请求链如下图&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/micro-in-cn/tutorials/blob/master/microservice-in-micro/docs/part1_user_login_process.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/raw/master/image/part1_user_login_process.png&#34; alt=&#34;img&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;新建模板-1&#34;&gt;新建模板&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;micro new --namespace=mu.micro.book --type=web --alias=user github.com/YuxinZhaozyx/GoMicroBookshop/user-web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;目录树&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;生成的目录树&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── main.go
├── plugin.go
├── handler
│   └── handler.go
├── html
│   └── index.html
├── Dockerfile
├── Makefile
└── README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改后：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── main.go
├── plugin.go
├── basic
│   └── config
│   │   └── config.go
│   │   └── consul.go
│   │   └── profiles.go
│   └── basic.go
├── conf
│   └── application.yml
│   └── application-consul.yml
├── handler
│   └── handler.go
├── Dockerfile
├── Makefile
└── README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go-web是一个很简单的web开发库，它不像其它go语言的web框架有那么多工具集，它核心在两个方面&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;让程序支持http请求&lt;/li&gt;
&lt;li&gt;天生属于Micro生态&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;它不需要额外的代码就可以注册到Micro生态中，和其它类型的服务一样。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;web&lt;/strong&gt;核心有三个地方&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/user-web/basic/config/config.go&#34; target=&#34;_blank&#34;&gt;config.go&lt;/a&gt; 负责加载配置&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/user-web/handler/handler.go&#34; target=&#34;_blank&#34;&gt;handler.go&lt;/a&gt; 负责处理请求&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/user-web/main.go&#34; target=&#34;_blank&#34;&gt;main.go&lt;/a&gt; 程序运行入口&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;config&#34;&gt;config&lt;/h4&gt;

&lt;p&gt;设置类似user-srv的设置，但去除mysql的配置。&lt;/p&gt;

&lt;p&gt;user-web/basic/config/config.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package config

import (
    &amp;quot;os&amp;quot;
    &amp;quot;path/filepath&amp;quot;
    &amp;quot;strings&amp;quot;
    &amp;quot;sync&amp;quot;

    &amp;quot;github.com/micro/go-micro/config&amp;quot;
    &amp;quot;github.com/micro/go-micro/config/source&amp;quot;
    &amp;quot;github.com/micro/go-micro/config/source/file&amp;quot;
    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;
)

var (
    err error
)

var (
    defaultRootPath         = &amp;quot;app&amp;quot;
    defaultConfigFilePrefix = &amp;quot;application-&amp;quot;
    consulConfig            defaultConsulConfig
    profiles                defaultProfiles
    m                       sync.RWMutex
    inited                  bool
)

// Init 初始化配置
func Init() {
    m.Lock()
    defer m.Unlock()

    if inited {
        log.Logf(&amp;quot;[Init] 配置已经初始化过&amp;quot;)
        return
    }

    // 加载yml配置
    // 先加载基础配置
    appPath, _ := filepath.Abs(filepath.Dir(filepath.Join(&amp;quot;./&amp;quot;, string(filepath.Separator))))

    pt := filepath.Join(appPath, &amp;quot;conf&amp;quot;)
    os.Chdir(appPath)

    // 找到application.yml文件
    if err = config.Load(file.NewSource(file.WithPath(pt + &amp;quot;/application.yml&amp;quot;))); err != nil {
        panic(err)
    }

    // 找到需要引入的新配置文件
    if err = config.Get(defaultRootPath, &amp;quot;profiles&amp;quot;).Scan(&amp;amp;profiles); err != nil {
        panic(err)
    }

    log.Logf(&amp;quot;[Init] 加载配置文件：path: %s, %+v\n&amp;quot;, pt+&amp;quot;/application.yml&amp;quot;, profiles)

    // 开始导入新文件
    if len(profiles.GetInclude()) &amp;gt; 0 {
        include := strings.Split(profiles.GetInclude(), &amp;quot;,&amp;quot;)

        sources := make([]source.Source, len(include))
        for i := 0; i &amp;lt; len(include); i++ {
            filePath := pt + string(filepath.Separator) + defaultConfigFilePrefix + strings.TrimSpace(include[i]) + &amp;quot;.yml&amp;quot;

            log.Logf(&amp;quot;[Init] 加载配置文件：path: %s\n&amp;quot;, filePath)

            sources[i] = file.NewSource(file.WithPath(filePath))
        }

        // 加载include的文件
        if err = config.Load(sources...); err != nil {
            panic(err)
        }
    }

    // 赋值
    config.Get(defaultRootPath, &amp;quot;consul&amp;quot;).Scan(&amp;amp;consulConfig)

    // 标记已经初始化
    inited = true
}

// GetConsulConfig 获取Consul配置
func GetConsulConfig() (ret ConsulConfig) {
    return consulConfig
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;user-web/basic/config/consul.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package config

// ConsulConfig consul 配置
type ConsulConfig interface {
    GetEnabled() bool
    GetPort() int
    GetHost() string
}

// defaultConsulConfig 默认consul 配置
type defaultConsulConfig struct {
    Enabled bool   `json:&amp;quot;enabled&amp;quot;`
    Host    string `json:&amp;quot;host&amp;quot;`
    Port    int    `json:&amp;quot;port&amp;quot;`
}

// GetPort consul 端口
func (c defaultConsulConfig) GetPort() int {
    return c.Port
}

// GetEnabled consul 激活
func (c defaultConsulConfig) GetEnabled() bool {
    return c.Enabled
}

// GetHost consul 主机地址
func (c defaultConsulConfig) GetHost() string {
    return c.Host
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;user-web/basic/config/profiles.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package config

// Profiles 属性配置文件
type Profiles interface {
    GetInclude() string
}

// defaultProfiles 属性配置文件
type defaultProfiles struct {
    Include string `json:&amp;quot;include&amp;quot;`
}

// Include 包含的配置文件
// 名称前缀为&amp;quot;application-&amp;quot;，格式为yml，如：&amp;quot;application-xxx.yml&amp;quot;
// 多个文件名以逗号隔开，并省略掉前缀&amp;quot;application-&amp;quot;，如：dn, jpush, mysql
func (p defaultProfiles) GetInclude() string {
    return p.Include
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;handler-1&#34;&gt;handler&lt;/h4&gt;

&lt;p&gt;user-web/handler/handler.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package handler

import (
    &amp;quot;context&amp;quot;
    &amp;quot;encoding/json&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;time&amp;quot;

    user &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user&amp;quot;
    &amp;quot;github.com/micro/go-micro/client&amp;quot;
    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;
)

var (
    serviceClient user.UserService
)

// Error 错误结构体
type Error struct {
    Code   string `json:&amp;quot;code&amp;quot;`
    Detail string `json:&amp;quot;detail&amp;quot;`
}

func Init() {
    serviceClient = user.NewUserService(&amp;quot;mu.micro.book.srv.user&amp;quot;, client.DefaultClient)
}

// Login 登录入口
func Login(w http.ResponseWriter, r *http.Request) {
    // 只接受POST请求
    if r.Method != &amp;quot;POST&amp;quot; {
        log.Logf(&amp;quot;非法请求&amp;quot;)
        http.Error(w, &amp;quot;非法请求&amp;quot;, 400)
        return
    }

    r.ParseForm()

    // 调用后台服务
    rsp, err := serviceClient.QueryUserByName(context.TODO(), &amp;amp;user.Request{
        UserName: r.Form.Get(&amp;quot;userName&amp;quot;),
    })
    if err != nil {
        http.Error(w, err.Error(), 500)
        return
    }

    // 返回结果
    response := map[string]interface{}{
        &amp;quot;ref&amp;quot;: time.Now().UnixNano(),
    }

    if rsp.User.Pwd == r.Form.Get(&amp;quot;pwd&amp;quot;) {
        response[&amp;quot;success&amp;quot;] = rsp.Success

        // 干掉密码返回
        rsp.User.Pwd = &amp;quot;&amp;quot;
        response[&amp;quot;data&amp;quot;] = rsp.User
    } else {
        response[&amp;quot;success&amp;quot;] = false
        response[&amp;quot;error&amp;quot;] = &amp;amp;Error{
            Detail: &amp;quot;密码错误&amp;quot;,
        }
    }

    w.Header().Add(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json; charset=utf-8&amp;quot;)

    // encode and write the response as json 返回json结构
    if err := json.NewEncoder(w).Encode(response); err != nil {
        http.Error(w, err.Error(), 500)
        return
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;main-1&#34;&gt;main&lt;/h4&gt;

&lt;p&gt;user-web/main.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;

    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;

    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-web/basic&amp;quot;
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-web/basic/config&amp;quot;
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-web/handler&amp;quot;
    &amp;quot;github.com/micro/cli&amp;quot;
    &amp;quot;github.com/micro/go-micro/registry&amp;quot;
    &amp;quot;github.com/micro/go-micro/registry/consul&amp;quot;
    &amp;quot;github.com/micro/go-micro/web&amp;quot;
)

func main() {
    // 初始化配置
    basic.Init()

    // 使用consul注册
    micReg := consul.NewRegistry(registryOptions)

    // create new web service 创建新服务
    service := web.NewService(
        web.Name(&amp;quot;mu.micro.book.web.user&amp;quot;),
        web.Version(&amp;quot;latest&amp;quot;),
        web.Registry(micReg),
        web.Address(&amp;quot;:8088&amp;quot;),
    )

    // initialise service 初始化服务
    if err := service.Init(
        web.Action(func(c *cli.Context) {
            // 初始化handler
            handler.Init()
        }),
    ); err != nil {
        log.Fatal(err)
    }

    // register call handler 注册登录接口
    service.HandleFunc(&amp;quot;/user/login&amp;quot;, handler.Login)

    // run service 运行服务
    if err := service.Run(); err != nil {
        log.Fatal(err)
    }
}

func registryOptions(ops *registry.Options) {
    consulCfg := config.GetConsulConfig()
    ops.Timeout = time.Second * 5
    ops.Addrs = []string{fmt.Sprintf(&amp;quot;%s:%d&amp;quot;, consulCfg.GetHost(), consulCfg.GetPort())}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;handler里定义了错误结构体&lt;strong&gt;Error&lt;/strong&gt;、&lt;strong&gt;Init&lt;/strong&gt;、&lt;strong&gt;Login&lt;/strong&gt;方法。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Init&lt;/strong&gt; 用来初始化handler需要用到的服务客户端&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Login&lt;/strong&gt; 处理登录请求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Login&lt;/strong&gt;在解析完参数后，通过RPC调用&lt;strong&gt;service&lt;/strong&gt;的&lt;strong&gt;QueryUserByName&lt;/strong&gt;方法。查出的结果后再进行密码匹配。&lt;/p&gt;

&lt;p&gt;匹配成功后便返回用户信息。&lt;/p&gt;

&lt;h4 id=&#34;启动-1&#34;&gt;启动&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;启动consul&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;consul agent -dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;运行api&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;micro --registry=consul --api_namespace=mu.micro.book.web  api --handler=web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;运行user-srv&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd user-srv
go run main.go plugin.go 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;运行user-web&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd user-web
go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;测试-1&#34;&gt;测试&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl --request POST --url http://127.0.0.1:8088/user/login --header &amp;quot;Content-Type:application/x-www-form-urlencoded&amp;quot; --data &amp;quot;userName=micro&amp;amp;pwd=1234&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;错误输出：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;id&amp;quot;:&amp;quot;go.micro.client&amp;quot;,&amp;quot;code&amp;quot;:500,&amp;quot;detail&amp;quot;:&amp;quot;connection error: dial tcp: address fdf5:da13:de04::e58:59504: too many colons in address&amp;quot;,&amp;quot;status&amp;quot;:&amp;quot;Internal Server Error&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go-micro暂不支持ipv6，待解决。&lt;/p&gt;

&lt;p&gt;正确输出：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;data&amp;quot;:{&amp;quot;id&amp;quot;:10001,&amp;quot;name&amp;quot;:&amp;quot;micro&amp;quot;},&amp;quot;ref&amp;quot;:1561869942897349500,&amp;quot;success&amp;quot;:true}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;隔日重启后各服务分配到的是ipv4而不是ipv6地址，程序正常执行，未找到原因，待解决。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GoMicroBookshop项目开发笔记-0</title>
      <link>https://YuxinZhaozyx.github.io/post/gomicrobookshop-project/dev-note-0/</link>
      <pubDate>Thu, 04 Jul 2019 23:02:54 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/post/gomicrobookshop-project/dev-note-0/</guid>
      <description>

&lt;h1 id=&#34;项目简介&#34;&gt;项目简介&lt;/h1&gt;

&lt;h2 id=&#34;业务模块&#34;&gt;业务模块&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户&lt;/strong&gt;，users&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;库存&lt;/strong&gt;，inventory&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;权限&lt;/strong&gt;，auth&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;订单&lt;/strong&gt;，orders&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支付&lt;/strong&gt;，payment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;服务抽象结构&#34;&gt;服务抽象结构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/raw/master/image/design.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;用户、订单、支付服务都会有对外暴露接口，故而它们各自有web层。web层app之间不会互相调用，它们只会与非web层的应用交互。&lt;/p&gt;

&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Golang环境 &lt;a href=&#34;https://golang.google.cn/&#34; target=&#34;_blank&#34;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gRPC &lt;a href=&#34;https://grpc.io/docs/quickstart/go.html&#34; target=&#34;_blank&#34;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Consul&lt;/li&gt;
&lt;li&gt;Micro&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## 安装go-micro
go get github.com/micro/go-micro

## 安装micro
go get github.com/micro/micro
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;mysql&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有其它一些会用到的库或组件，但不是基础依赖，需要时再安装。&lt;/p&gt;

&lt;h2 id=&#34;涉及技术与库&#34;&gt;涉及技术与库&lt;/h2&gt;

&lt;p&gt;Golang，gRPC，Mysql，Redis，Docker，K8s，Go-micro/Micro&lt;/p&gt;

&lt;h2 id=&#34;搭建平台&#34;&gt;搭建平台&lt;/h2&gt;

&lt;p&gt;win10&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>$\LaTeX$ Math Symbols</title>
      <link>https://YuxinZhaozyx.github.io/post/latex-math-symbols/</link>
      <pubDate>Thu, 04 Jul 2019 20:04:20 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/post/latex-math-symbols/</guid>
      <description>

&lt;p&gt;Summary of LaTeX Math Symbols&lt;/p&gt;

&lt;p&gt;$\LaTeX$数学符号汇总&lt;/p&gt;

&lt;h2 id=&#34;function-symbol-and-special-characters-函数-符号及特殊字符&#34;&gt;Function, symbol and special characters 函数、符号及特殊字符&lt;/h2&gt;

&lt;h3 id=&#34;tone-声调&#34;&gt;Tone 声调&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\bar{x}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\bar{x}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\acute{\eta}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\acute{\eta}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\check{\alpha}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\check{\alpha}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\grave{\eta}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\grave{\eta}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\breve{a}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\breve{a}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ddot{y}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ddot{y}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\dot{x}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\dot{x}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\hat{\alpha}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\hat{\alpha}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\tilde{\iota}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\tilde{\iota} $$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;function-函数&#34;&gt;Function 函数&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sin\theta&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sin\theta$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\cos\theta&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\cos\theta$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\tan\theta&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\tan\theta$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\arcsin\frac{L}{r}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\arcsin\frac{L}{r}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\arccos\frac{T}{r}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\arccos\frac{T}{r}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\arctan\frac{L}{T}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\arctan\frac{L}{T}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sinh g&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sinh g$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\cosh h&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\cosh h$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\tanh i&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\tanh i$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\operatorname{sh}j&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\operatorname{sh}j$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\operatorname{argsh}k&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\operatorname{argsh}k$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\operatorname{ch}h&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\operatorname{ch}h$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\operatorname{argch}l&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\operatorname{argch}l$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\operatorname{th}i&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\operatorname{th}i$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\operatorname{argth}m&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\operatorname{argth}m$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;k&#39;(x)=\lim_{\Delta x\to 0}\frac{k(x)-k(x-\Delta x)}{\Deltax}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$k&amp;rsquo;(x)=\lim_{\Delta x\to 0}\frac{k(x)-k(x-\Delta x)}{\Delta}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\limsup S&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\limsup S$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\liminf I&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\liminf I$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\max H&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\max H$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\min L&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\min L$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\inf s&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\inf s$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sup t&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sup t$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\exp t&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\exp t$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ln X&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ln X$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\lg X&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\lg X$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\log X&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\log X$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\log_\alpha X&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\log_\alpha X$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ker x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ker x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\deg x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\deg x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\gcd(T,U,V,W,X)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\gcd(T,U,V,W,X)$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\Pr x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\Pr x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\det x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\det x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\hom x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\hom x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\arg x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\arg x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\dim x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\dim x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\lim_{t\to n}T&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\lim_{t\to n}T$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;congruent-同余&#34;&gt;Congruent 同余&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\pmod{m}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\pmod{m}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;a \bmod b&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$a \bmod b$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;differential-微分&#34;&gt;Differential 微分&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\nabla&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\nabla$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\partial x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\partial x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\mathrm{d}x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\mathrm{d}x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\dot x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\dot x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ddot x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ddot x$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;set-集合&#34;&gt;Set 集合&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\forall&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\forall$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\exists&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\exists$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\emptyset&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\emptyset$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\varnothing&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\varnothing$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ni&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ni$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\not\in&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\not\in$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\notin&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\notin$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\subset&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\subset$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\supset&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\supset$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\supseteq&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\supseteq$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\cap&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\cap$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\bigcap&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\bigcap$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\bigcap&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\bigcap$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\biguplus&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\biguplus$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqsubset&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqsubset$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqsubseteq&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqsubseteq$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqsupseteq&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqsupseteq$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqcap&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqcap$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqcup&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqcup$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\bigsqcup&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\bigsqcup$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;logic-逻辑&#34;&gt;Logic 逻辑&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$p$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\land&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\land$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\wedge&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\wedge$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\bigwedge&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\bigwedge$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\bar{q} \to p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\bar{q} \to p$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\lor&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\lor$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\vee&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\vee$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\bigvee&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\bigvee$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\lnot&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\lnot$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\neg q&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\neg q$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\setminus&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\setminus$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\smallsetminus&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\smallsetminus$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;radication-开方&#34;&gt;Radication  开方&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqrt{3}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqrt{3}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqrt[n]{3}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqrt[n]{3}$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;relation-关系&#34;&gt;Relation 关系&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\Delta ABC\sim\Delta XYZ&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\Delta ABC\sim\Delta XYZ$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqrt{3}\approx1.732050808\ldots&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqrt{3}\approx1.732050808\ldots$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\simeq&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\simeq$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\cong&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\cong$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\dot=&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\dot=$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ggg&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ggg$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\gg&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\gg$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$&amp;gt;$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ge&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ge$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\geqq&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\geqq$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$=$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\leq&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\leq$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\leqq&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\leqq$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$&amp;lt;$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ll&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ll$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\lll&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\lll$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;(x-y)^2\equiv(-x+y)^2\equiv x^2-2xy+y^2&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$(x-y)^2\equiv(-x+y)^2\equiv x^2-2xy+y^2$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x\not\equiv N&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$x\not\equiv N$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x\ne A&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$x\ne A$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x\neq C&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$x\neq C$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;t\propto v&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$t\propto v$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\pm&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\pm$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\mp&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\mp$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    To be continue   未完待续
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
