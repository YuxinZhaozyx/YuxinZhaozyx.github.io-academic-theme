<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>paper-note on YuxinZhao</title>
    <link>https://YuxinZhaozyx.github.io/categories/paper-note/</link>
    <description>Recent content in paper-note on YuxinZhao</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy; {year} YuxinZhao</copyright>
    <lastBuildDate>Sun, 14 Jul 2019 13:40:12 +0800</lastBuildDate>
    
	    <atom:link href="https://YuxinZhaozyx.github.io/categories/paper-note/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[论文笔记] Faster R-CNN: Towards Real-Time Object Detection With Region Proposal Networks</title>
      <link>https://YuxinZhaozyx.github.io/paper-note/faster-r-cnn-towards-real-time-object-detection-with-region-proposal-networks/</link>
      <pubDate>Sun, 14 Jul 2019 13:40:12 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/paper-note/faster-r-cnn-towards-real-time-object-detection-with-region-proposal-networks/</guid>
      <description>

&lt;p&gt;Faster R-CNN在Fast R-CNN的基础上做改进，提出用RPN（Region Proposal Network, 一种全卷积神经网络）代替Selective Search，降低检测耗时。Faster R-CNN由RPN和Fast R-CNN构成，RPN和Fast R-CNN共享卷积计算得到的特征图，以此降低计算量，使得Faster R-CNN可以在单GPU上以5fps的速度运行，且精度达到SOTA。&lt;/p&gt;

&lt;h3 id=&#34;术语缩写&#34;&gt;术语缩写&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;缩写&lt;/th&gt;
&lt;th&gt;全称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;R-CNN&lt;/td&gt;
&lt;td&gt;Region Convolution Neural Network&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RPN&lt;/td&gt;
&lt;td&gt;Region Proposal Network&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FCN&lt;/td&gt;
&lt;td&gt;Fully Convolutional Network&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SS&lt;/td&gt;
&lt;td&gt;Selective Search&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ZF&lt;/td&gt;
&lt;td&gt;Zeiler and Fergus model&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IoU&lt;/td&gt;
&lt;td&gt;Intersection-over-Union&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RoI&lt;/td&gt;
&lt;td&gt;Region of Interest&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;faster-r-cnn&#34;&gt;Faster R-CNN&lt;/h2&gt;







&lt;figure&gt;

&lt;img src=&#34;image/1563085747876.png&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Faster R-CNN is a single, unified network for object detection. The RPN module serves as the &amp;lsquo;attention&amp;rsquo; of the unified network.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Faster R-CNN 由以下两个部分组成:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deep fully convolutional network that proposes regions&lt;/li&gt;
&lt;li&gt;Fast R-CNN detector that uses the proposed regions&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The RPN module tells the Fast R-CNN module where to look.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;region-proposal-network&#34;&gt;Region Proposal Network&lt;/h2&gt;







&lt;figure&gt;

&lt;img src=&#34;image/1563086507733.png&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Region Proposal Network&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;A Region Proposal Network (RPN) takes an image (of any size) as input and outputs a set of rectangular object proposals, each with an objectness score.&lt;/p&gt;

&lt;p&gt;The authors model this process with a &lt;strong&gt;fully convolutional network&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To generate region proposals, the authors &lt;strong&gt;slide a small network($n \times n$ spatial window, $n=3$) over the convolutional feature map&lt;/strong&gt; output by the last shared convolution layer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Each sliding window is mapped to a lower-dimensional feature (256-d for ZF and 512-d for VGG, with ReLU following).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This feature is &lt;strong&gt;fed into two sibling fully-connected layers&lt;/strong&gt; &amp;ndash; a &lt;strong&gt;box-regression layer&lt;/strong&gt; ($reg$) and a &lt;strong&gt;box-classification layer&lt;/strong&gt; ($cls$). This architecture is naturally implemented with and $n \times n$ convolutional layer followed by two sibling $1 \times 1$ convolutional layers (for $reg$ and $cls$ respectively).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;anchor&#34;&gt;Anchor&lt;/h3&gt;

&lt;p&gt;the number of maximum possible proposals for each location is denoted as $k$.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$reg$ layer has $4k$ outputs $(x, y, w, h)$ encoding the coordinates of $k$ boxes&lt;/li&gt;
&lt;li&gt;$cls$ layer has $2k$ outputs scores that estimate probability of object or not object for each proposal. (implemented as a two-class softmax layer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The $k$ proposals are parameterized relative to $k$ reference boxes, which we call &lt;strong&gt;anchors&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An anchor is centered at the sliding window in question, and is associated  with &lt;strong&gt;a scale and aspect ratio&lt;/strong&gt; (宽高比).&lt;/li&gt;
&lt;li&gt;For a convolutional feature map of a size $W \times H $ , there are $WHk$ anchors in total.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;use 3 scales with box areas of $128^2$, $256^2$, $512^2$ pixels, and 3 aspect ratios of 1:1, 1:2, 2:1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;image/1563093098483.png&#34; alt=&#34;1563093098483&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;multi-scale-anchors-as-regression-reference&#34;&gt;Multi-Scale Anchors as Regression Reference&lt;/h4&gt;







&lt;figure&gt;

&lt;img src=&#34;image/1563088410857.png&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Different schemes for addressing multiple scales and sizes.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;作者采取b)和c)变化窗口形状和大小的方法，而不使用a)变换图片大小的方法。&lt;/p&gt;

&lt;h3 id=&#34;lost-function&#34;&gt;Lost Function&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Positive anchor&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the anchor/anchors with the highest Intersection-over-Union(IoU) overlap with a ground-truth box (作者采用).&lt;/li&gt;
&lt;li&gt;an anchor that has an IoU overlap &amp;gt; 0.7 with any grouth-truth box (作者不采用).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Negative anchor&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;non-positive anchor if its IoU &amp;lt; 0.3 for all grouth-truth boxes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;lost-function-for-an-image&#34;&gt;lost  function for an image&lt;/h4&gt;

&lt;p&gt;$$
L(\{p_i\}, \{t_i\}) = \frac1{N_{cls}} \sum_i{L_{cls}} (p_i, p_i^*) + \lambda \frac{1}{N_{reg}} \sum_i {L_{reg}(t_i, t_i^*)}
$$&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$L_{cls}$ is log loss over two classes (object $vs.$ not object)&lt;/li&gt;
&lt;li&gt;$L_{reg}(t_i, t_i^*) = R(t_i - t_i^*)$ where $R$ is the robust loss function (smooth $L_1$)&lt;/li&gt;
&lt;li&gt;$N_{cls}$ is the mini-batch size (i.e., $N_{cls}=256$)&lt;/li&gt;
&lt;li&gt;$N_{reg}$ is the number of anchor locations (i.e., $N_{reg} \approx 2400$)&lt;/li&gt;
&lt;li&gt;$\lambda = 10$ and thus both $cls$ and $reg$ terms are roughly equally weighted.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The normalization as above is not required and could be simplified.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;$$
\begin{align}
&amp;amp;t_x = (x-x_a)/w_a, &amp;amp; t_y = (y-y_a)/h_a, \\&lt;br /&gt;
&amp;amp;t_w = \log(w/w_a), &amp;amp; t_h = log(h/h_a),  \\&lt;br /&gt;
&amp;amp;t^*_x = (x-x^*_a)/w_a, &amp;amp; t^*_y = (y^*-y_a)/h_a, \\&lt;br /&gt;
&amp;amp;t^*_w = \log(w^*/w_a), &amp;amp; t^*_h = log(h^*/h_a),  \\&lt;br /&gt;
\end{align}
$$&lt;/p&gt;

&lt;h4 id=&#34;training-rpns&#34;&gt;Training RPNs&lt;/h4&gt;

&lt;p&gt;The RPN can be trained &lt;strong&gt;end-to-end&lt;/strong&gt; by back-propagation and &lt;strong&gt;stochastic gradient descent (SGD)&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一张图片包含多个正样本和负样本(正样本少于负样本)&lt;/li&gt;
&lt;li&gt;随机采样256个样本用于计算loss of a mini-batch&lt;/li&gt;
&lt;li&gt;初始化: Gaussian distribution (mean=0, standard deviation=0.01)&lt;/li&gt;
&lt;li&gt;momentum: 0.9,   weight decay: 0.0005&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sharing-features-for-rpn-and-fast-r-cnn&#34;&gt;Sharing Features for RPN and Fast R-CNN&lt;/h2&gt;

&lt;h3 id=&#34;4-step-alternating-training&#34;&gt;4 - Step Alternating Training&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Train the RPN as described previously.&lt;/li&gt;
&lt;li&gt;Train a separated detection network (ImageNet-pre-trained) by Fast R-CNN using the proposals generated by step-1 RPN.&lt;/li&gt;
&lt;li&gt;Use the detector network to initialize RPN training, but fix the shared convolutional layers and only fine-tune the layers unique to RPN.&lt;/li&gt;
&lt;li&gt;keeping the shared convolutional layers fixed, fine-tune the unique layers of Fast R-CNN.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Faster R-CNN: Towards Real-Time Object Detection With Region Proposal Networks</title>
      <link>https://YuxinZhaozyx.github.io/publication/faster-r-cnn-towards-real-time-object-detection-with-region-proposal-networks/</link>
      <pubDate>Sun, 14 Jul 2019 11:59:27 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/publication/faster-r-cnn-towards-real-time-object-detection-with-region-proposal-networks/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
