[{"authors":["yuxinzhao"],"categories":null,"content":"I\u0026rsquo;m a college student of software engineering at the South China University of Technology. My research interests include artificial intelligence, micro service and engineering.\n我是华南理工大学软件工程专业的一名大学生。我的研究兴趣包括人工智能、微服务和软件工程。\n","date":1562318459,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1562318459,"objectID":"486f8643cd7bf1ce56e100a3e5ef15e9","permalink":"https://YuxinZhaozyx.github.io/authors/yuxinzhao/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/yuxinzhao/","section":"authors","summary":"I\u0026rsquo;m a college student of software engineering at the South China University of Technology. My research interests include artificial intelligence, micro service and engineering. 我是华南理工大学软件工程专业的一名大学生。我的研究兴趣包括人工智能、微服务和软件工程。","tags":null,"title":"Yuxin Zhao 赵煜新","type":"authors"},{"authors":["admin"],"categories":null,"content":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://YuxinZhaozyx.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet.","tags":null,"title":"Nelson Bighetti","type":"authors"},{"authors":["Yuxin Zhao 赵煜新"],"categories":["hugo"],"content":" 前言 我使用的Hugo主题Academic自带Disqus评论模块支持，但由于国内无法访问Disqus，因此我开始寻找其他评论模块，最终选择了Gitment评论模块。\n我为什么选择Gitment？ 在选择之前我们先看一下有哪些选项可以选择。\n Disqus: 国外使用较多的评论组件，但国内需要代理才能访问。\n 多说: 国内最多用户使用的评论系统，但已于2017年6月停止提供服务。\n 网易云跟帖: 网易提供的评论系统，但也于2017月8月停止提供服务。\n 畅言: 搜狐提供的评论组件，功能丰富，体验优异；但必须进行域名备案。只要域名备过案就可以通过审核，简单问题复杂化。\n Gitment: 国人I\u0026rsquo;m Sun编写的开源评论模块，创新性地将评论放置在github的issue中，作者目前已不再维护。\n CommentHub: 受Gitment启发也是将评论存储在github issue中的评论系统，解决Gitment会在前端暴露Client ID和Client Secret可能造成的安全问题，改进成在后端服务处理业务和存储证书，通过iframe实现评论功能。\n  已停止服务的多说、网易云跟帖和国内无法访问的Disqus无法使用，故排除在选择范围之外。畅言由于需要备案，步骤繁琐不想用。剩下的Gitment和ComementHub实际上很像，CommentHub看上去会更安全一些，因为它不会像Gitment一样暴露Client ID和Client Secret，但其实即便别人获取了我们的Client ID和Client Secret，没有我的github账号依然无法使用，而且只能在我指定的网址才能用，故Gitment还是比较安全的。\n最终我在两者中选择了Gitment (因为CommentHub有点难看)。\nGitment评论模块介绍  Gitment is a comment system based on GitHub Issues, which can be used in the frontend without any server-side implementation.\nGitment 是一款基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。\n  项目地址\n 官方示例\n  基本使用 1. 注册OAuth Application 需要先在github上注册一个OAuth Application，点击此处注册。\nCallback URL 填写评论页面对应的域名，如https://YuxinZhaozyx.github.io。\n 其他内容可以随便写，但Callback URL一定要填写正确。   注册成功后会得到一个Client ID和Client Secret，这将被用于之后的用户登录认证。\n2. 引入Gitment 将一下代码添加到你的页面：\n\u0026lt;div id=\u0026quot;container\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://imsun.github.io/gitment/style/default.css\u0026quot;\u0026gt; \u0026lt;script src=\u0026quot;https://imsun.github.io/gitment/dist/gitment.browser.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var gitment = new Gitment({ id: '页面 ID', // 可选。默认为 location.href owner: '你的 GitHub ID', repo: '存储评论的 repo', oauth: { client_id: '你的 client ID', client_secret: '你的 client secret', }, }) gitment.render('container') \u0026lt;/script\u0026gt;   id的长度要限制在50个字符内，但也不可为空字符串。详情见此处。    上述代码为gitment作者的示例代码，但作者已停止维护，网址已不可用，可用以下代码代替。\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://www.wenjunjiang.win/css/gitment.css\u0026quot;\u0026gt; \u0026lt;script src=\u0026quot;https://www.wenjunjiang.win/js/gitment.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;     以上方式会使用最新版本的Gitment，若希望引用确定版本的Gitment，需要使用npm进行安装。\n$ npm install --save gitment  使用操作详见Gitment Option。\n  3. 初始化评论 页面发布后，你需要访问页面并使用你的 GitHub 账号登录（请确保你的账号是第二步所填 repo 的 owner），点击初始化按钮。\n之后其他用户即可在该页面发表评论。\n 要先登录才能初始化，未登录初始化前可能会显示Error: Comments Not initialized错误，属正常现象。   问题汇总 1. Error: Not Found  owner或者repo配置错误，注意名字和参考名字的大小写。\n 注意不可设置 id : \u0026quot;\u0026quot;。\n  2. Error: Comments Not initialized  还没有登录，登录之后初始化就可以了。 注册OAuth Application时Authorization Callback URL指定地址错误。  3. Error: Validation Failed  id太长，导致初始化失败。解决方案见问题4。  id`的长度要限制在50个字符内，但也不可为空字符串 github issue的标签label有长度限制，label的最大长度为50个字符 id的作用是唯一标识每一篇文章。 在gitment创建的issue里，每个issue有两个label，其中一个是gitment，另一个是id指定的值。因此id受到label的限制。   4. 在一篇文章下看到另一篇文章的issue  两篇文章的id重复  解决方案 将文章的id设置为文章的创建时间，即可保证id长度不超过50个字符且文章评论不重复。\nid: {{ .Params.Date }}   不要复制前面的某一篇论文而忘记修改时间，否则评论还是会交错的。  \nGitment的汉化版本 只需到模板里将原来定义CSS和JS的那两行改成：\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://billts.site/extra_css/gitment.css\u0026quot;\u0026gt; \u0026lt;script src=\u0026quot;https://billts.site/js/gitment.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  Gitment在Hugo Academic主题下的配置 在hugo建立的根目录下创建目录layouts/partials/，再在新创建的目录下创建comments.html用于覆盖Academic主题的comments.html。\n$ cd \u0026lt;your-hugo-website-root\u0026gt; $ mkdir -p layouts/partials/ $ vi layouts/partials/comments.html   注意是在hugo建立的根目录而不是修改themes/academic/主题下的文件。   在layouts/partials/comments.html中输入以下代码：\n{{ if .Site.Params.gitment.language }} \u0026lt;section id=\u0026quot;comments\u0026quot;\u0026gt; \u0026lt;div id=\u0026quot;gitmentContainer\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; {{ if eq .Site.Params.gitment.language \u0026quot;zh\u0026quot; }} \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://billts.site/extra_css/gitment.css\u0026quot;\u0026gt; \u0026lt;script src=\u0026quot;https://billts.site/js/gitment.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; {{ else }} \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://www.wenjunjiang.win/css/gitment.css\u0026quot;\u0026gt; \u0026lt;script src=\u0026quot;https://www.wenjunjiang.win/js/gitment.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} \u0026lt;script\u0026gt; var gitment = new Gitment({ id: '{{ .Params.Date }}', owner: {{ .Site.Params.gitment.owner }}, repo: {{ .Site.Params.gitment.repo }}, oauth: { client_id: {{ .Site.Params.gitment.clientID }}, client_secret: {{ .Site.Params.gitment.clientSecret }}, }, }); gitment.render('gitmentContainer'); \u0026lt;/script\u0026gt; \u0026lt;/section\u0026gt; {{ end }}  在 config/_default/params.toml末尾添加以下配置。\n# Config comments of gitment [gitment] language = \u0026quot;en\u0026quot; # set \u0026quot;\u0026quot; to disable comment, \u0026quot;zh\u0026quot; to Chinese, \u0026quot;en\u0026quot; to English owner = \u0026quot;\u0026lt;your-github-name\u0026gt;\u0026quot; repo = \u0026quot;\u0026lt;the-repo-to-store-comments\u0026gt;\u0026quot; clientID = \u0026quot;\u0026lt;your-client-ID\u0026gt;\u0026quot; clientSecret = \u0026quot;\u0026lt;your-client-secret\u0026gt;\u0026quot;  至此，评论功能配置完成。\n参考引用 [1] Gitment：使用 GitHub Issues 搭建评论系统 \n[2] Gitment评论功能接入踩坑教程\n[3] Error: Comments Not Initialized # 95\n[4] Validation Failed ID长度问题建议 #116\n[5] [object ProgressEvent] #170\n","date":1562318459,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562318459,"objectID":"5912ebcf469a2e35d974f7d7811b81e7","permalink":"https://YuxinZhaozyx.github.io/post/gitment-in-hugo/","publishdate":"2019-07-05T17:20:59+08:00","relpermalink":"/post/gitment-in-hugo/","section":"post","summary":"由于国内无法访问Disqus，hugo-academic主题自带的disqus评论功能无法使用，故而寻求其他评论方法，最后找到了gitment，但也踩了很多的坑。","tags":["hugo","academic","gitment","comments"],"title":"Hugo博客集成Gitment评论模块","type":"post"},{"authors":["Yuxin Zhao 赵煜新"],"categories":["project-note"],"content":" 第一章 用户服务 本章节我们实现用户服务，用户服务分为两层，web层（user-web）与服务层（user-srv），前者提供http接口，后者向web提供RPC服务。\n user-web 以下简称web user-srv 以下简称service  web服务主要向用户提供如下接口\n 登录与token颁发 鉴权  我们不提供注册接口，一来增加不必要的代码量，我们的核心还是介绍如何使用Micro组件。\nserver服务主要向所有内部服务提供用户查询接口：\n 根据userName用户名查询用户  在开发应用之前，我们要先定义好命名空间。\n   服务 命名空间 说明     接入层API mu.micro.book.web 负责代理所有mu.micro.book.web下游的web应用，比如mu.micro.book.web.user等   用户web mu.micro.book.web.user 接收API下放的路由为/user请求   用户服务 mu.micro.book.srv.user 对架构内应用提供user查询服务    user-srv user-srv的各组件如下表所示\n   启动顺序 组件 作用     1 basic 初始化配置与解析配置文件，初始化数据库等基础组件   2 model 模型层，提供业务数据   3 handler 接入层，提供对外接口，并向model层调用请求数据    Micro有提供代码生成器指令new，它可以新建服务模板代码，把基本所需的目录结构建好，省去大家挖坑的时间。\n新建模板 micro new --namespace=mu.micro.book --type=srv --alias=user github.com/YuxinZhaozyx/GoMicroBookshop/user-srv  模板生成在user-srv目录，其结构如下\n. ├── main.go ├── plugin.go ├── handler │ └── user.go ├── subscriber │ └── user.go ├── proto/user │ └── user.proto ├── Dockerfile ├── Makefile └── README.md  修改后\n. ├── main.go ├── plugin.go ├── basic │ └── config * 配置类 │ │ └── config.go * 初始化配置类 │ │ └── consul.go * consul配置结构体 │ │ └── mysql.go * mysql配置结构体 │ │ └── profiles.go * 配置文件树辅助类 │ └── db * 数据库相关 │ │ └── db.go * 初始化数据库 │ │ └── mysql.go * mysql数据库相关 │ └── basic.go * 初始化基础组件 ├── conf * 配置文件目录 ├── handler │ └── user.go * 将名称改为user ├── model * 增加模型层，用于与数据库交换数据 │ └── user * 用户模型类 │ │ └── user.go * 初始化用户模型类 │ │ └── user_get.go * 封装获取用户数据类业务 │ └── model.go * 初始化模型层 ├── proto/user │ └── user.proto * 将名称改为user ├── Dockerfile ├── Makefile └── README.md  目录解释：basic, model, conf\nbasic, model 目录与micro无关，只是为了实现MVC架构。\n basic 负责初始化基础组件，比如数据库、配置等 model 负责封装业务逻辑 conf 配置文件目录，现在我们还没用配置中心，暂先用文件的方式  定义User原型 在user.proto中定义User原型，暂且定义以下字段，足够登录，显示用户基本信息、异常信息即可\nsyntax = \u0026quot;proto3\u0026quot;; package mu.micro.book.srv.user; service User { rpc QueryUserByName(Request) returns (Response) {} } message user { int64 id = 1; string name = 2; string pwd = 3; uint64 createTime = 4; uint64 updateTime = 5; } message Error { int32 code = 1; string detail = 2; } message Request { string userID = 1; string userName = 2; string userPwd = 3; } message Response { bool success = 1; Error error = 2; user user = 3; }  上面定义了User服务的基本原型结构，包含用户User，请求Request与响应结构Response，还定义了查询用户的方法QueryUserByName。\n下面我们生成类型与服务方法：\nprotoc --proto_path=. --go_out=. --micro_out=. proto/user/user.proto  执行后会生成 proto/user/user.micro.go 和 proto/user/user.pb.go 两个文件。\n数据库与配置 创建User表 选用MySQL作为数据库，以下是建表语句\nCREATE DATABASE `micro_book_mall` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin */; USE `micro_book_mall`; CREATE TABLE `user` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键', `user_id` int(10) unsigned DEFAULT NULL COMMENT '用户id', `user_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户名', `pwd` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '密码', `created_time` timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3), `updated_time` timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3), PRIMARY KEY (`id`), UNIQUE KEY `user_user_name_uindex` (`user_name`), UNIQUE KEY `user_user_id_uindex` (`user_id`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_bin COMMENT ='用户表'; INSERT INTO user (user_id, user_name, pwd) VALUE (10001, 'micro', '1234');  基本组件配置 基础组件(basic)目前主要的功能是初始化配置与数据库。它的入口代码(basic/basic.go)是一个Init初始化方法，负责初始化其下所有组件。\npackage basic import ( \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/config\u0026quot; \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/db\u0026quot; ) func Init() { config.Init() db.Init() }  配置config 加载配置我们会使用到go-config里面的本地文件配置。相关示例可以参考go-config示例。\n配置文件在 conf/ 文件夹下。\napplication.yml # 根配置文件 application-db.yml # 数据库配置文件 application-consul.yml # consul服务发现配置文件  根配置文件application.yml如下\napp: profiles: include: consul, db  起名为application.yml是参考了Spring-boot风格。我们把consul和db配置分到独立的文件中。\n通过解析app.profiles.include来加载指定的配置文件。当然也可以全部写在application.yml中，只是我觉得挤在一起的配置不优雅。\n初始化配置的过程大致如下：\n   顺序 过程 说明     1 加载application.yml 读取conf目录下application.yml文件   2 解析profiles属性 如果有该属性则找到include值，该值就是指定需要引入的conf下的配置文件   3 解析include 解析出include配置【值】，并组合成文件名，文件名规则为[application-值.yml]   4 读取include声明文件 读取配置文件值   5 解析配置 将配置文件中的值解析到配置对象中    以下是它的核心代码(basic/config/config.go)\n// Init 初始化配置 func Init() { m.Lock() defer m.Unlock() if inited { log.Logf(\u0026quot;[Init] 配置已经初始化过\u0026quot;) return } // 加载yml配置 // 先加载基础配置 appPath, _ := filepath.Abs(filepath.Dir(filepath.Join(\u0026quot;.\u0026quot;+sp, sp))) pt := filepath.Join(appPath, \u0026quot;conf\u0026quot;) os.Chdir(appPath) // 找到application.yml文件 if err = config.Load(file.NewSource(file.WithPath(pt + sp + \u0026quot;application.yml\u0026quot;))); err != nil { panic(err) } // 找到需要引入的新配置文件 if err = config.Get(defaultRootPath, \u0026quot;profiles\u0026quot;).Scan(\u0026amp;profiles); err != nil { panic(err) } log.Logf(\u0026quot;[Init] 加载配置文件：path: %s, %+v\\n\u0026quot;, pt+sp+\u0026quot;application.yml\u0026quot;, profiles) // 开始导入新文件 if len(profiles.GetInclude()) \u0026gt; 0 { include := strings.Split(profiles.GetInclude(), \u0026quot;,\u0026quot;) sources := make([]source.Source, len(include)) for i := 0; i \u0026lt; len(include); i++ { filePath := pt + string(filepath.Separator) + defaultConfigFilePrefix + strings.TrimSpace(include[i]) + \u0026quot;.yml\u0026quot; log.Logf(\u0026quot;[Init] 加载配置文件：path: %s\\n\u0026quot;, filePath) sources[i] = file.NewSource(file.WithPath(filePath)) } // 加载include的文件 if err = config.Load(sources...); err != nil { panic(err) } } // 赋值 config.Get(defaultRootPath, \u0026quot;consul\u0026quot;).Scan(\u0026amp;consulConfig) config.Get(defaultRootPath, \u0026quot;mysql\u0026quot;).Scan(\u0026amp;mysqlConfig) // 标记已经初始化 inited = true }  我们目前定义了三个配置结构，它们在basic的config目录下\n profiles consul mysql：\n// defaultProfiles 属性配置文件 type defaultProfiles struct { Include string `json:\u0026quot;include\u0026quot;` } // defaultConsulConfig 默认consul 配置 type defaultConsulConfig struct { Enabled bool `json:\u0026quot;enabled\u0026quot;` Host string `json:\u0026quot;host\u0026quot;` Port int `json:\u0026quot;port\u0026quot;` } // defaultMysqlConfig mysql 配置 type defaultMysqlConfig struct { URL string `json:\u0026quot;url\u0026quot;` Enable bool `json:\u0026quot;enabled\u0026quot;` MaxIdleConnection int `json:\u0026quot;maxIdleConnection\u0026quot;` MaxOpenConnection int `json:\u0026quot;maxOpenConnection\u0026quot;` }   数据库初始化 // user-srv/basic/db/db.go package db import ( \u0026quot;database/sql\u0026quot; \u0026quot;fmt\u0026quot; \u0026quot;sync\u0026quot; \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/config\u0026quot; \u0026quot;github.com/micro/go-micro/util/log\u0026quot; ) var ( inited bool mysqlDB *sql.DB m sync.RWMutex ) // Init 初始化数据库 func Init() { m.Lock() defer m.Unlock() var err error if inited{ err = fmt.Errorf(\u0026quot;[Init] db 已经初始化过了\u0026quot;) log.Logf(err.Error()) return } // 如果配置声明使用mysql if config.GetMysqlConfig().GetEnabled(){ initMysql() } inited = true } // GetDB 获取数据库 func GetDB() *sql.DB { return mysqlDB } // user-srv/basic/db/mysql.go package db import ( \u0026quot;database/sql\u0026quot; \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/config\u0026quot; \u0026quot;github.com/micro/go-micro/util/log\u0026quot; _ \u0026quot;github.com/go-sql-driver/mysql\u0026quot; ) func initMysql() { var err error // 创建连接 mysqlDB, err = sql.Open(\u0026quot;mysql\u0026quot;, config.GetMysqlConfig().GetURL()) if err != nil { log.Fatal(err) panic(err) } // 最大连接数 mysqlDB.SetMaxOpenConns(config.GetMysqlConfig().GetMaxOpenConnection()) // 最大闲置数 mysqlDB.SetMaxIdleConns(config.GetMysqlConfig().GetMaxIdleConnection()) // 激活链接 if err = mysqlDB.Ping(); err != nil { log.Fatal(err) } }  用户模型服务 /user-srv/model/user/user.go\npackage user import ( \u0026quot;fmt\u0026quot; \u0026quot;sync\u0026quot; proto \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user\u0026quot; ) var ( s *service m sync.RWMutex ) // service 服务 type service struct { } // Service 用户服务类 type Service interface { // QueryUserByName 根据用户名获取用户 QueryUserByName(userName string) (ret *proto.User, err error) } // GetService 获取服务类 func GetService() (Service, error) { if s == nil { return nil, fmt.Errorf(\u0026quot;[GetService] GetService 未初始化\u0026quot;) } return s, nil } // Init 初始化用户服务层 func Init() { m.Lock() defer m.Unlock() if s != nil { return } s = \u0026amp;service{} }  /user-srv/model/user/user_get.go\npackage user import ( \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/db\u0026quot; proto \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user\u0026quot; \u0026quot;github.com/micro/go-micro/util/log\u0026quot; ) func (s *service) QueryUserByName(userName string) (ret *proto.User, err error) { queryString := `SELECT user_id, user_name, pwd FROM user WHERE user_name = ?` // 获取数据库 o := db.GetDB() ret = \u0026amp;proto.User{} // 查询 err = o.QueryRow(queryString, userName).Scan(\u0026amp;ret.Id, \u0026amp;ret.Name, \u0026amp;ret.Pwd) if err != nil { log.Logf(\u0026quot;[QueryUserByName] 查询数据失败， err: %s\u0026quot;, err) return } return }  /user-srv/model/model.go\npackage model import \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/model/user\u0026quot; // Init 初始化模型层 func Init() { user.Init() }  Handler /user-srv/handler/user.go\npackage handler import ( \u0026quot;context\u0026quot; \u0026quot;github.com/micro/go-micro/util/log\u0026quot; model \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/model/user\u0026quot; proto \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user\u0026quot; ) type Service struct{} var ( userService model.Service ) // Init 初始化handler func Init() { var err error userService, err = model.GetService() if err != nil { log.Fatal(\u0026quot;[Init] 初始化Handler错误\u0026quot;) return } } // QueryUserByName 通过参数中的名字返回用户 func (e *Service) QueryUserByName(ctx context.Context, req *proto.Request, rsp *proto.Response) error { user, err := userService.QueryUserByName(req.UserName) if err != nil { rsp.Success = false rsp.Error = \u0026amp;proto.Error{ Code: 500, Detail: err.Error(), } return err } rsp.User = user rsp.Success = true return nil }  handler直接调用模型层方法获取数据并回传给rsp结构。\nmain main.go\npackage main import ( \u0026quot;fmt\u0026quot; \u0026quot;time\u0026quot; \u0026quot;github.com/micro/cli\u0026quot; \u0026quot;github.com/micro/go-micro\u0026quot; \u0026quot;github.com/micro/go-micro/registry\u0026quot; \u0026quot;github.com/micro/go-micro/registry/consul\u0026quot; \u0026quot;github.com/micro/go-micro/util/log\u0026quot; \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic\u0026quot; \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/config\u0026quot; \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/handler\u0026quot; \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/model\u0026quot; user \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user\u0026quot; ) func main() { // 初始化配置、数据库等信息 basic.Init() // 使用consul注册 micReg := consul.NewRegistry(registryOptions) // New Service 新建服务 service := micro.NewService( micro.Name(\u0026quot;mu.micro.book.srv.user\u0026quot;), micro.Registry(micReg), micro.Version(\u0026quot;latest\u0026quot;), ) // Initialise service 初始化服务 service.Init( micro.Action(func(c *cli.Context) { // 初始化模型层 model.Init() // 初始化handler handler.Init() }), ) // Register Handler 注册服务 user.RegisterUserHandler(service.Server(), new(handler.Service)) // Run service 启动服务 if err := service.Run(); err != nil { log.Fatal(err) } } func registryOptions(ops *registry.Options) { consulCfg := config.GetConsulConfig() ops.Timeout = time.Second * 5 ops.Addrs = []string{fmt.Sprintf(\u0026quot;%s:%d\u0026quot;, consulCfg.GetHost(), consulCfg.GetPort())} }  代码中我们默认使用consul作为注册中心，被在Action中初始化基础组件与模型层。\n 因为handler依赖model，所以初始化handler要在初始化模型层之后执行。   启动 启动consul\nconsul agent -dev  启动user-srv\ngo run main.go plugin.go  输出:\n2019/06/29 22:26:48 [Init] 加载配置文件：path: e:\\go\\src\\github.com\\YuxinZhaozyx\\GoMicroBookshop\\user-srv\\conf\\application.yml, {Include:consul, db} 2019/06/29 22:26:48 [Init] 加载配置文件：path: e:\\go\\src\\github.com\\YuxinZhaozyx\\GoMicroBookshop\\user-srv\\conf\\application-consul.yml 2019/06/29 22:26:48 [Init] 加载配置文件：path: e:\\go\\src\\github.com\\YuxinZhaozyx\\GoMicroBookshop\\user-srv\\conf\\application-db.yml 2019/06/29 22:26:48 Transport [http] Listening on [::]:56789 2019/06/29 22:26:48 Broker [http] Connected to [::]:56790 2019/06/29 22:26:48 Registry [consul] Registering node: mu.micro.book.srv.user-f51e60e1-cebf-4599-874c-8230d3113300  测试 micro --registry=consul call mu.micro.book.srv.user User.QueryUserByName \u0026quot;{\\\u0026quot;userName\\\u0026quot;: \\\u0026quot;micro\\\u0026quot;}\u0026quot;  输出:\n{ \u0026quot;success\u0026quot;: true, \u0026quot;user\u0026quot;: { \u0026quot;id\u0026quot;: 10001, \u0026quot;name\u0026quot;: \u0026quot;micro\u0026quot;, \u0026quot;pwd\u0026quot;: \u0026quot;1234\u0026quot; } }  user-srv服务搭建完成。\nuser-web web服务负责暴露接口给用户，用户请求登录，web通过用户名userName向service获取用户信息，再比对密码，正确则登录成功，反之返回错误。\n请求链如下图\n\n新建模板 micro new --namespace=mu.micro.book --type=web --alias=user github.com/YuxinZhaozyx/GoMicroBookshop/user-web  目录树\n生成的目录树\n. ├── main.go ├── plugin.go ├── handler │ └── handler.go ├── html │ └── index.html ├── Dockerfile ├── Makefile └── README.md  修改后：\n. ├── main.go ├── plugin.go ├── basic │ └── config │ │ └── config.go │ │ └── consul.go │ │ └── profiles.go │ └── basic.go ├── conf │ └── application.yml │ └── application-consul.yml ├── handler │ └── handler.go ├── Dockerfile ├── Makefile └── README.md  go-web是一个很简单的web开发库，它不像其它go语言的web框架有那么多工具集，它核心在两个方面\n 让程序支持http请求 天生属于Micro生态  它不需要额外的代码就可以注册到Micro生态中，和其它类型的服务一样。\nweb核心有三个地方\n config.go 负责加载配置 handler.go 负责处理请求 main.go 程序运行入口  config 设置类似user-srv的设置，但去除mysql的配置。\nuser-web/basic/config/config.go\npackage config import ( \u0026quot;os\u0026quot; \u0026quot;path/filepath\u0026quot; \u0026quot;strings\u0026quot; \u0026quot;sync\u0026quot; \u0026quot;github.com/micro/go-micro/config\u0026quot; \u0026quot;github.com/micro/go-micro/config/source\u0026quot; \u0026quot;github.com/micro/go-micro/config/source/file\u0026quot; \u0026quot;github.com/micro/go-micro/util/log\u0026quot; ) var ( err error ) var ( defaultRootPath = \u0026quot;app\u0026quot; defaultConfigFilePrefix = \u0026quot;application-\u0026quot; consulConfig defaultConsulConfig profiles defaultProfiles m sync.RWMutex inited bool ) // Init 初始化配置 func Init() { m.Lock() defer m.Unlock() if inited { log.Logf(\u0026quot;[Init] 配置已经初始化过\u0026quot;) return } // 加载yml配置 // 先加载基础配置 appPath, _ := filepath.Abs(filepath.Dir(filepath.Join(\u0026quot;./\u0026quot;, string(filepath.Separator)))) pt := filepath.Join(appPath, \u0026quot;conf\u0026quot;) os.Chdir(appPath) // 找到application.yml文件 if err = config.Load(file.NewSource(file.WithPath(pt + \u0026quot;/application.yml\u0026quot;))); err != nil { panic(err) } // 找到需要引入的新配置文件 if err = config.Get(defaultRootPath, \u0026quot;profiles\u0026quot;).Scan(\u0026amp;profiles); err != nil { panic(err) } log.Logf(\u0026quot;[Init] 加载配置文件：path: %s, %+v\\n\u0026quot;, pt+\u0026quot;/application.yml\u0026quot;, profiles) // 开始导入新文件 if len(profiles.GetInclude()) \u0026gt; 0 { include := strings.Split(profiles.GetInclude(), \u0026quot;,\u0026quot;) sources := make([]source.Source, len(include)) for i := 0; i \u0026lt; len(include); i++ { filePath := pt + string(filepath.Separator) + defaultConfigFilePrefix + strings.TrimSpace(include[i]) + \u0026quot;.yml\u0026quot; log.Logf(\u0026quot;[Init] 加载配置文件：path: %s\\n\u0026quot;, filePath) sources[i] = file.NewSource(file.WithPath(filePath)) } // 加载include的文件 if err = config.Load(sources...); err != nil { panic(err) } } // 赋值 config.Get(defaultRootPath, \u0026quot;consul\u0026quot;).Scan(\u0026amp;consulConfig) // 标记已经初始化 inited = true } // GetConsulConfig 获取Consul配置 func GetConsulConfig() (ret ConsulConfig) { return consulConfig }  user-web/basic/config/consul.go\npackage config // ConsulConfig consul 配置 type ConsulConfig interface { GetEnabled() bool GetPort() int GetHost() string } // defaultConsulConfig 默认consul 配置 type defaultConsulConfig struct { Enabled bool `json:\u0026quot;enabled\u0026quot;` Host string `json:\u0026quot;host\u0026quot;` Port int `json:\u0026quot;port\u0026quot;` } // GetPort consul 端口 func (c defaultConsulConfig) GetPort() int { return c.Port } // GetEnabled consul 激活 func (c defaultConsulConfig) GetEnabled() bool { return c.Enabled } // GetHost consul 主机地址 func (c defaultConsulConfig) GetHost() string { return c.Host }  user-web/basic/config/profiles.go\npackage config // Profiles 属性配置文件 type Profiles interface { GetInclude() string } // defaultProfiles 属性配置文件 type defaultProfiles struct { Include string `json:\u0026quot;include\u0026quot;` } // Include 包含的配置文件 // 名称前缀为\u0026quot;application-\u0026quot;，格式为yml，如：\u0026quot;application-xxx.yml\u0026quot; // 多个文件名以逗号隔开，并省略掉前缀\u0026quot;application-\u0026quot;，如：dn, jpush, mysql func (p defaultProfiles) GetInclude() string { return p.Include }  handler user-web/handler/handler.go\npackage handler import ( \u0026quot;context\u0026quot; \u0026quot;encoding/json\u0026quot; \u0026quot;net/http\u0026quot; \u0026quot;time\u0026quot; user \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user\u0026quot; \u0026quot;github.com/micro/go-micro/client\u0026quot; \u0026quot;github.com/micro/go-micro/util/log\u0026quot; ) var ( serviceClient user.UserService ) // Error 错误结构体 type Error struct { Code string `json:\u0026quot;code\u0026quot;` Detail string `json:\u0026quot;detail\u0026quot;` } func Init() { serviceClient = user.NewUserService(\u0026quot;mu.micro.book.srv.user\u0026quot;, client.DefaultClient) } // Login 登录入口 func Login(w http.ResponseWriter, r *http.Request) { // 只接受POST请求 if r.Method != \u0026quot;POST\u0026quot; { log.Logf(\u0026quot;非法请求\u0026quot;) http.Error(w, \u0026quot;非法请求\u0026quot;, 400) return } r.ParseForm() // 调用后台服务 rsp, err := serviceClient.QueryUserByName(context.TODO(), \u0026amp;user.Request{ UserName: r.Form.Get(\u0026quot;userName\u0026quot;), }) if err != nil { http.Error(w, err.Error(), 500) return } // 返回结果 response := map[string]interface{}{ \u0026quot;ref\u0026quot;: time.Now().UnixNano(), } if rsp.User.Pwd == r.Form.Get(\u0026quot;pwd\u0026quot;) { response[\u0026quot;success\u0026quot;] = rsp.Success // 干掉密码返回 rsp.User.Pwd = \u0026quot;\u0026quot; response[\u0026quot;data\u0026quot;] = rsp.User } else { response[\u0026quot;success\u0026quot;] = false response[\u0026quot;error\u0026quot;] = \u0026amp;Error{ Detail: \u0026quot;密码错误\u0026quot;, } } w.Header().Add(\u0026quot;Content-Type\u0026quot;, \u0026quot;application/json; charset=utf-8\u0026quot;) // encode and write the response as json 返回json结构 if err := json.NewEncoder(w).Encode(response); err != nil { http.Error(w, err.Error(), 500) return } }  main user-web/main.go\npackage main import ( \u0026quot;fmt\u0026quot; \u0026quot;time\u0026quot; \u0026quot;github.com/micro/go-micro/util/log\u0026quot; \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-web/basic\u0026quot; \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-web/basic/config\u0026quot; \u0026quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-web/handler\u0026quot; \u0026quot;github.com/micro/cli\u0026quot; \u0026quot;github.com/micro/go-micro/registry\u0026quot; \u0026quot;github.com/micro/go-micro/registry/consul\u0026quot; \u0026quot;github.com/micro/go-micro/web\u0026quot; ) func main() { // 初始化配置 basic.Init() // 使用consul注册 micReg := consul.NewRegistry(registryOptions) // create new web service 创建新服务 service := web.NewService( web.Name(\u0026quot;mu.micro.book.web.user\u0026quot;), web.Version(\u0026quot;latest\u0026quot;), web.Registry(micReg), web.Address(\u0026quot;:8088\u0026quot;), ) // initialise service 初始化服务 if err := service.Init( web.Action(func(c *cli.Context) { // 初始化handler handler.Init() }), ); err != nil { log.Fatal(err) } // register call handler 注册登录接口 service.HandleFunc(\u0026quot;/user/login\u0026quot;, handler.Login) // run service 运行服务 if err := service.Run(); err != nil { log.Fatal(err) } } func registryOptions(ops *registry.Options) { consulCfg := config.GetConsulConfig() ops.Timeout = time.Second * 5 ops.Addrs = []string{fmt.Sprintf(\u0026quot;%s:%d\u0026quot;, consulCfg.GetHost(), consulCfg.GetPort())} }  handler里定义了错误结构体Error、Init、Login方法。\n Init 用来初始化handler需要用到的服务客户端 Login 处理登录请求  Login在解析完参数后，通过RPC调用service的QueryUserByName方法。查出的结果后再进行密码匹配。\n匹配成功后便返回用户信息。\n启动 启动consul\nconsul agent -dev  运行api\nmicro --registry=consul --api_namespace=mu.micro.book.web api --handler=web  运行user-srv\ncd user-srv go run main.go plugin.go  运行user-web\ncd user-web go run main.go  测试 curl --request POST --url http://127.0.0.1:8088/user/login --header \u0026quot;Content-Type:application/x-www-form-urlencoded\u0026quot; --data \u0026quot;userName=micro\u0026amp;pwd=1234\u0026quot;  错误输出：\n{\u0026quot;id\u0026quot;:\u0026quot;go.micro.client\u0026quot;,\u0026quot;code\u0026quot;:500,\u0026quot;detail\u0026quot;:\u0026quot;connection error: dial tcp: address fdf5:da13:de04::e58:59504: too many colons in address\u0026quot;,\u0026quot;status\u0026quot;:\u0026quot;Internal Server Error\u0026quot;}  go-micro暂不支持ipv6，待解决。\n正确输出：\n{\u0026quot;data\u0026quot;:{\u0026quot;id\u0026quot;:10001,\u0026quot;name\u0026quot;:\u0026quot;micro\u0026quot;},\u0026quot;ref\u0026quot;:1561869942897349500,\u0026quot;success\u0026quot;:true}  隔日重启后各服务分配到的是ipv4而不是ipv6地址，程序正常执行，未找到原因，待解决。\n","date":1562253783,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562253783,"objectID":"4709d58cfea87aa750d92b63a913a2d1","permalink":"https://YuxinZhaozyx.github.io/post/gomicrobookshop-project/dev-note-1/","publishdate":"2019-07-04T23:23:03+08:00","relpermalink":"/post/gomicrobookshop-project/dev-note-1/","section":"post","summary":"实现用户服务的 web 和 service 微服务","tags":["golang","micro","go-micro","micro service"],"title":"GoMicroBookshop项目开发笔记-1","type":"post"},{"authors":["Yuxin Zhao 赵煜新"],"categories":["project-note"],"content":" 项目简介 业务模块  用户，users 库存，inventory 权限，auth 订单，orders 支付，payment  服务抽象结构 用户、订单、支付服务都会有对外暴露接口，故而它们各自有web层。web层app之间不会互相调用，它们只会与非web层的应用交互。\n准备工作  Golang环境 安装 gRPC 安装 Consul Micro  ## 安装go-micro go get github.com/micro/go-micro ## 安装micro go get github.com/micro/micro   mysql  还有其它一些会用到的库或组件，但不是基础依赖，需要时再安装。\n涉及技术与库 Golang，gRPC，Mysql，Redis，Docker，K8s，Go-micro/Micro\n搭建平台 win10\n","date":1562252574,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562252574,"objectID":"3b7ed416a512f2a7475612cc7c4c4079","permalink":"https://YuxinZhaozyx.github.io/post/gomicrobookshop-project/dev-note-0/","publishdate":"2019-07-04T23:02:54+08:00","relpermalink":"/post/gomicrobookshop-project/dev-note-0/","section":"post","summary":"GoMicroBookshop项目是我学习micro编写的练手项目-准备开发环境","tags":["golang","micro","go-micro","micro service"],"title":"GoMicroBookshop项目开发笔记-0","type":"post"},{"authors":["Yuxin Zhao 赵煜新"],"categories":["math"],"content":" Summary of LaTeX Math Symbols\n$\\LaTeX$数学符号汇总\nFunction, symbol and special characters 函数、符号及特殊字符 Tone 声调    Syntax 语法 Effect 效果     \\bar{x} $$\\bar{x}$$   \\acute{\\eta} $$\\acute{\\eta}$$   \\check{\\alpha} $$\\check{\\alpha}$$   \\grave{\\eta} $$\\grave{\\eta}$$   \\breve{a} $$\\breve{a}$$   \\ddot{y} $$\\ddot{y}$$   \\dot{x} $$\\dot{x}$$   \\hat{\\alpha} $$\\hat{\\alpha}$$   \\tilde{\\iota} $$\\tilde{\\iota} $$    Function 函数    Syntax 语法 Effect 效果     \\sin\\theta $$\\sin\\theta$$   \\cos\\theta $$\\cos\\theta$$   \\tan\\theta $$\\tan\\theta$$   \\arcsin\\frac{L}{r} $$\\arcsin\\frac{L}{r}$$   \\arccos\\frac{T}{r} $$\\arccos\\frac{T}{r}$$   \\arctan\\frac{L}{T} $$\\arctan\\frac{L}{T}$$   \\sinh g $$\\sinh g$$   \\cosh h $$\\cosh h$$   \\tanh i $$\\tanh i$$   \\operatorname{sh}j $$\\operatorname{sh}j$$   \\operatorname{argsh}k $$\\operatorname{argsh}k$$   \\operatorname{ch}h $$\\operatorname{ch}h$$   \\operatorname{argch}l $$\\operatorname{argch}l$$   \\operatorname{th}i $$\\operatorname{th}i$$   \\operatorname{argth}m $$\\operatorname{argth}m$$   k'(x)=\\lim_{\\Delta x\\to 0}\\frac{k(x)-k(x-\\Delta x)}{\\Deltax} $$k\u0026rsquo;(x)=\\lim_{\\Delta x\\to 0}\\frac{k(x)-k(x-\\Delta x)}{\\Delta}$$   \\limsup S $$\\limsup S$$   \\liminf I $$\\liminf I$$   \\max H $$\\max H$$   \\min L $$\\min L$$   \\inf s $$\\inf s$$   \\sup t $$\\sup t$$   \\exp t $$\\exp t$$   \\ln X $$\\ln X$$   \\lg X $$\\lg X$$   \\log X $$\\log X$$   \\log_\\alpha X $$\\log_\\alpha X$$   \\ker x $$\\ker x$$   \\deg x $$\\deg x$$   \\gcd(T,U,V,W,X) $$\\gcd(T,U,V,W,X)$$   \\Pr x $$\\Pr x$$   \\det x $$\\det x$$   \\hom x $$\\hom x$$   \\arg x $$\\arg x$$   \\dim x $$\\dim x$$   \\lim_{t\\to n}T $$\\lim_{t\\to n}T$$    Congruent 同余    Syntax 语法 Effect 效果     \\pmod{m} $$\\pmod{m}$$   a \\bmod b $$a \\bmod b$$    Differential 微分    Syntax 语法 Effect 效果     \\nabla $$\\nabla$$   \\partial x $$\\partial x$$   \\mathrm{d}x $$\\mathrm{d}x$$   \\dot x $$\\dot x$$   \\ddot x $$\\ddot x$$    Set 集合    Syntax 语法 Effect 效果     \\forall $$\\forall$$   \\exists $$\\exists$$   \\emptyset $$\\emptyset$$   \\varnothing $$\\varnothing$$   \\ni $$\\ni$$   \\not\\in $$\\not\\in$$   \\notin $$\\notin$$   \\subset $$\\subset$$   \\supset $$\\supset$$   \\supseteq $$\\supseteq$$   \\cap $$\\cap$$   \\bigcap $$\\bigcap$$   \\bigcap $$\\bigcap$$   \\biguplus $$\\biguplus$$   \\sqsubset $$\\sqsubset$$   \\sqsubseteq $$\\sqsubseteq$$   \\sqsupseteq $$\\sqsupseteq$$   \\sqcap $$\\sqcap$$   \\sqcup $$\\sqcup$$   \\bigsqcup $$\\bigsqcup$$    Logic 逻辑    Syntax 语法 Effect 效果     p $$p$$   \\land $$\\land$$   \\wedge $$\\wedge$$   \\bigwedge $$\\bigwedge$$   \\bar{q} \\to p $$\\bar{q} \\to p$$   \\lor $$\\lor$$   \\vee $$\\vee$$   \\bigvee $$\\bigvee$$   \\lnot $$\\lnot$$   \\neg q $$\\neg q$$   \\setminus $$\\setminus$$   \\smallsetminus $$\\smallsetminus$$    Radication 开方    Syntax 语法 Effect 效果     \\sqrt{3} $$\\sqrt{3}$$   \\sqrt[n]{3} $$\\sqrt[n]{3}$$    Relation 关系    Syntax 语法 Effect 效果     \\Delta ABC\\sim\\Delta XYZ $$\\Delta ABC\\sim\\Delta XYZ$$   \\sqrt{3}\\approx1.732050808\\ldots $$\\sqrt{3}\\approx1.732050808\\ldots$$   \\simeq $$\\simeq$$   \\cong $$\\cong$$   \\dot= $$\\dot=$$   \\ggg $$\\ggg$$   \\gg $$\\gg$$   \u0026gt; $$\u0026gt;$$   \\ge $$\\ge$$   \\geqq $$\\geqq$$   = $$=$$   \\leq $$\\leq$$   \\leqq $$\\leqq$$   \u0026lt; $$\u0026lt;$$   \\ll $$\\ll$$   \\lll $$\\lll$$   (x-y)^2\\equiv(-x+y)^2\\equiv x^2-2xy+y^2 $$(x-y)^2\\equiv(-x+y)^2\\equiv x^2-2xy+y^2$$   x\\not\\equiv N $$x\\not\\equiv N$$   x\\ne A $$x\\ne A$$   x\\neq C $$x\\neq C$$   t\\propto v $$t\\propto v$$   \\pm $$\\pm$$   \\mp $$\\mp$$     To be continue 未完待续   ","date":1562241860,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562241860,"objectID":"cfa7719454352fdcd4c8a02ca6f786e1","permalink":"https://YuxinZhaozyx.github.io/post/latex-math-symbols/","publishdate":"2019-07-04T20:04:20+08:00","relpermalink":"/post/latex-math-symbols/","section":"post","summary":"Summary of LaTeX Math Symbols","tags":["LaTeX","math","markdown"],"title":"$\\LaTeX$ Math Symbols","type":"post"},{"authors":["Yuxin Zhao 赵煜新"],"categories":["project"],"content":" A bookshop project for my go-micro and micro service learning.\n本项目依据项目 microservice-in-cn 学习micro工具链以及微服务。\n项目简介 本项目为一个网上书店。\n业务模块  用户，users 库存，inventory 权限，auth 订单，orders 支付，payment  服务抽象结构 \n用户、订单、支付服务都会有对外暴露接口，故而它们各自有web层。web层app之间不会互相调用，它们只会与非web层的应用交互。\n","date":1562214423,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562214423,"objectID":"a890eba53401208c6c266e5fec44d193","permalink":"https://YuxinZhaozyx.github.io/project/gomicrobookshop/","publishdate":"2019-07-04T12:27:03+08:00","relpermalink":"/project/gomicrobookshop/","section":"project","summary":"A bookshop project for my go-micro and micro service learning","tags":["golang","micro","go-micro","micro service"],"title":"GoMicroBookshop","type":"project"}]