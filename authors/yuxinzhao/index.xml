<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YuxinZhao</title>
    <link>https://YuxinZhaozyx.github.io/authors/yuxinzhao/</link>
    <description>Recent content on YuxinZhao</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy; {year} YuxinZhao</copyright>
    <lastBuildDate>Mon, 15 Jul 2019 11:07:26 +0800</lastBuildDate>
    
	    <atom:link href="https://YuxinZhaozyx.github.io/authors/yuxinzhao/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What is RoI?</title>
      <link>https://YuxinZhaozyx.github.io/post/what-is-roi/</link>
      <pubDate>Mon, 15 Jul 2019 11:07:26 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/post/what-is-roi/</guid>
      <description>

&lt;h2 id=&#34;roi概念&#34;&gt;RoI概念&lt;/h2&gt;

&lt;p&gt;RoI的全称是Region of Interest，中文名称是&amp;rdquo;感兴趣区域&amp;rdquo;。&lt;/p&gt;

&lt;p&gt;RoI是从图像中选择的一个图像区域，这个区域是你进行图像分析的重点。圈出这块区域可以得到一个子图像(subimage)，之后就可以在这个区域内使用进行进一步处理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;目的：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;减少处理时间&lt;/li&gt;
&lt;li&gt;增加精度&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>[论文笔记] Faster R-CNN: Towards Real-Time Object Detection With Region Proposal Networks</title>
      <link>https://YuxinZhaozyx.github.io/paper-note/faster-r-cnn-towards-real-time-object-detection-with-region-proposal-networks/</link>
      <pubDate>Sun, 14 Jul 2019 13:40:12 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/paper-note/faster-r-cnn-towards-real-time-object-detection-with-region-proposal-networks/</guid>
      <description>

&lt;p&gt;Faster R-CNN在Fast R-CNN的基础上做改进，提出用RPN（Region Proposal Network, 一种全卷积神经网络）代替Selective Search，降低检测耗时。Faster R-CNN由RPN和Fast R-CNN构成，RPN和Fast R-CNN共享卷积计算得到的特征图，以此降低计算量，使得Faster R-CNN可以在单GPU上以5fps的速度运行，且精度达到SOTA。&lt;/p&gt;

&lt;h3 id=&#34;术语缩写&#34;&gt;术语缩写&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;缩写&lt;/th&gt;
&lt;th&gt;全称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;R-CNN&lt;/td&gt;
&lt;td&gt;Region Convolution Neural Network&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RPN&lt;/td&gt;
&lt;td&gt;Region Proposal Network&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FCN&lt;/td&gt;
&lt;td&gt;Fully Convolutional Network&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SS&lt;/td&gt;
&lt;td&gt;Selective Search&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ZF&lt;/td&gt;
&lt;td&gt;Zeiler and Fergus model&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IoU&lt;/td&gt;
&lt;td&gt;Intersection-over-Union&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RoI&lt;/td&gt;
&lt;td&gt;Region of Interest&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;faster-r-cnn&#34;&gt;Faster R-CNN&lt;/h2&gt;







&lt;figure&gt;

&lt;img src=&#34;image/1563085747876.png&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Faster R-CNN is a single, unified network for object detection. The RPN module serves as the &amp;lsquo;attention&amp;rsquo; of the unified network.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Faster R-CNN 由以下两个部分组成:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deep fully convolutional network that proposes regions&lt;/li&gt;
&lt;li&gt;Fast R-CNN detector that uses the proposed regions&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The RPN module tells the Fast R-CNN module where to look.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;region-proposal-network&#34;&gt;Region Proposal Network&lt;/h2&gt;







&lt;figure&gt;

&lt;img src=&#34;image/1563086507733.png&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Region Proposal Network&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;A Region Proposal Network (RPN) takes an image (of any size) as input and outputs a set of rectangular object proposals, each with an objectness score.&lt;/p&gt;

&lt;p&gt;The authors model this process with a &lt;strong&gt;fully convolutional network&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To generate region proposals, the authors &lt;strong&gt;slide a small network($n \times n$ spatial window, $n=3$) over the convolutional feature map&lt;/strong&gt; output by the last shared convolution layer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Each sliding window is mapped to a lower-dimensional feature (256-d for ZF and 512-d for VGG, with ReLU following).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This feature is &lt;strong&gt;fed into two sibling fully-connected layers&lt;/strong&gt; &amp;ndash; a &lt;strong&gt;box-regression layer&lt;/strong&gt; ($reg$) and a &lt;strong&gt;box-classification layer&lt;/strong&gt; ($cls$). This architecture is naturally implemented with and $n \times n$ convolutional layer followed by two sibling $1 \times 1$ convolutional layers (for $reg$ and $cls$ respectively).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;anchor&#34;&gt;Anchor&lt;/h3&gt;

&lt;p&gt;the number of maximum possible proposals for each location is denoted as $k$.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$reg$ layer has $4k$ outputs $(x, y, w, h)$ encoding the coordinates of $k$ boxes&lt;/li&gt;
&lt;li&gt;$cls$ layer has $2k$ outputs scores that estimate probability of object or not object for each proposal. (implemented as a two-class softmax layer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The $k$ proposals are parameterized relative to $k$ reference boxes, which we call &lt;strong&gt;anchors&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An anchor is centered at the sliding window in question, and is associated  with &lt;strong&gt;a scale and aspect ratio&lt;/strong&gt; (宽高比).&lt;/li&gt;
&lt;li&gt;For a convolutional feature map of a size $W \times H $ , there are $WHk$ anchors in total.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;use 3 scales with box areas of $128^2$, $256^2$, $512^2$ pixels, and 3 aspect ratios of 1:1, 1:2, 2:1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;image/1563093098483.png&#34; alt=&#34;1563093098483&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;multi-scale-anchors-as-regression-reference&#34;&gt;Multi-Scale Anchors as Regression Reference&lt;/h4&gt;







&lt;figure&gt;

&lt;img src=&#34;image/1563088410857.png&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Different schemes for addressing multiple scales and sizes.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;作者采取b)和c)变化窗口形状和大小的方法，而不使用a)变换图片大小的方法。&lt;/p&gt;

&lt;h3 id=&#34;lost-function&#34;&gt;Lost Function&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Positive anchor&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the anchor/anchors with the highest Intersection-over-Union(IoU) overlap with a ground-truth box (作者采用).&lt;/li&gt;
&lt;li&gt;an anchor that has an IoU overlap &amp;gt; 0.7 with any grouth-truth box (作者不采用).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Negative anchor&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;non-positive anchor if its IoU &amp;lt; 0.3 for all grouth-truth boxes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;lost-function-for-an-image&#34;&gt;lost  function for an image&lt;/h4&gt;

&lt;p&gt;$$
L(\{p_i\}, \{t_i\}) = \frac1{N_{cls}} \sum_i{L_{cls}} (p_i, p_i^*) + \lambda \frac{1}{N_{reg}} \sum_i {L_{reg}(t_i, t_i^*)}
$$&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$L_{cls}$ is log loss over two classes (object $vs.$ not object)&lt;/li&gt;
&lt;li&gt;$L_{reg}(t_i, t_i^*) = R(t_i - t_i^*)$ where $R$ is the robust loss function (smooth $L_1$)&lt;/li&gt;
&lt;li&gt;$N_{cls}$ is the mini-batch size (i.e., $N_{cls}=256$)&lt;/li&gt;
&lt;li&gt;$N_{reg}$ is the number of anchor locations (i.e., $N_{reg} \approx 2400$)&lt;/li&gt;
&lt;li&gt;$\lambda = 10$ and thus both $cls$ and $reg$ terms are roughly equally weighted.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The normalization as above is not required and could be simplified.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;$$
\begin{align}
&amp;amp;t_x = (x-x_a)/w_a, &amp;amp; t_y = (y-y_a)/h_a, \\&lt;br /&gt;
&amp;amp;t_w = \log(w/w_a), &amp;amp; t_h = log(h/h_a),  \\&lt;br /&gt;
&amp;amp;t^*_x = (x-x^*_a)/w_a, &amp;amp; t^*_y = (y^*-y_a)/h_a, \\&lt;br /&gt;
&amp;amp;t^*_w = \log(w^*/w_a), &amp;amp; t^*_h = log(h^*/h_a),  \\&lt;br /&gt;
\end{align}
$$&lt;/p&gt;

&lt;h4 id=&#34;training-rpns&#34;&gt;Training RPNs&lt;/h4&gt;

&lt;p&gt;The RPN can be trained &lt;strong&gt;end-to-end&lt;/strong&gt; by back-propagation and &lt;strong&gt;stochastic gradient descent (SGD)&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一张图片包含多个正样本和负样本(正样本少于负样本)&lt;/li&gt;
&lt;li&gt;随机采样256个样本用于计算loss of a mini-batch&lt;/li&gt;
&lt;li&gt;初始化: Gaussian distribution (mean=0, standard deviation=0.01)&lt;/li&gt;
&lt;li&gt;momentum: 0.9,   weight decay: 0.0005&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sharing-features-for-rpn-and-fast-r-cnn&#34;&gt;Sharing Features for RPN and Fast R-CNN&lt;/h2&gt;

&lt;h3 id=&#34;4-step-alternating-training&#34;&gt;4 - Step Alternating Training&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Train the RPN as described previously.&lt;/li&gt;
&lt;li&gt;Train a separated detection network (ImageNet-pre-trained) by Fast R-CNN using the proposals generated by step-1 RPN.&lt;/li&gt;
&lt;li&gt;Use the detector network to initialize RPN training, but fix the shared convolutional layers and only fine-tune the layers unique to RPN.&lt;/li&gt;
&lt;li&gt;keeping the shared convolutional layers fixed, fine-tune the unique layers of Fast R-CNN.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Academic Icon配置</title>
      <link>https://YuxinZhaozyx.github.io/post/icons-of-hugo-academic/</link>
      <pubDate>Fri, 12 Jul 2019 11:45:33 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/post/icons-of-hugo-academic/</guid>
      <description>

&lt;p&gt;Academic主题可以使用&lt;a href=&#34;https://fontawesome.com/icons?d=gallery&#34; target=&#34;_blank&#34;&gt;Font Awesome&lt;/a&gt;和&lt;a href=&#34;https://jpswalsh.github.io/academicons/&#34; target=&#34;_blank&#34;&gt;Academicons&lt;/a&gt;的各种图标。但是Academic本身支持的版本不一定是最新的，部分图标因此不会显示。因此本文将介绍如何更换成最新的、速度更快的源。&lt;/p&gt;

&lt;h2 id=&#34;icon包简要介绍&#34;&gt;icon包简要介绍&lt;/h2&gt;

&lt;p&gt;icon包&lt;code&gt;fab&lt;/code&gt;包括以下&lt;strong&gt;品牌&lt;/strong&gt;图标：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;twitter，weixin，weibo，linkedin，github，facebook，pinterest，twitch，youtube，instagram，soundcloud&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fontawesome.com/icons?d=gallery&amp;amp;s=brands&#34; target=&#34;_blank&#34;&gt;查看所有图标&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;icon包&lt;code&gt;fas&lt;/code&gt;和&lt;code&gt;far&lt;/code&gt;包括以下&lt;strong&gt;常规&lt;/strong&gt;图标：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;传真，信封（电子邮件），评论（论坛）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fontawesome.com/icons?d=gallery&amp;amp;s=regular,solid&#34; target=&#34;_blank&#34;&gt;查看所有图标&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;icon包&lt;code&gt;ai&lt;/code&gt;包括以下&lt;strong&gt;学术&lt;/strong&gt;图标：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cv，google-scholar，arxiv，orcid，researchgate，mendeley&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jpswalsh.github.io/academicons/&#34; target=&#34;_blank&#34;&gt;查看所有图标&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;在hugo-academic中使用图标&#34;&gt;在Hugo-Academic中使用图标&lt;/h2&gt;

&lt;p&gt;以python图标为例，在&lt;a href=&#34;https://fontawesome.com/icons?d=gallery&amp;amp;q=python&#34; target=&#34;_blank&#34;&gt;Font Awesome&lt;/a&gt;中找到python的编号为“fab fa-python&amp;rdquo;。&lt;/p&gt;

&lt;h3 id=&#34;在skills面板中使用图标&#34;&gt;在skills面板中使用图标：&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;/content/home/skills.md&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[feature]]
    icon=&amp;quot;python&amp;quot;
    icon_pack=&amp;quot;fab&amp;quot;
    name=&amp;quot;Python&amp;quot;
    description=&amp;quot;80%&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;在about面板中使用图标&#34;&gt;在about面板中使用图标：&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;/content/authors/&amp;lt;author-name&amp;gt;/_index.md&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;social:
- icon: python
  icon_pack: fab
  link: &amp;quot;...&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    注意: &lt;code&gt;icon&lt;/code&gt;的值不是完整的编号，要去除&lt;code&gt;fa-&lt;/code&gt;前缀。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;更换hugo-academic主题使用的font-awesome源&#34;&gt;更换Hugo-Academic主题使用的Font Awesome源&lt;/h2&gt;

&lt;p&gt;我们将使用Font Awesome的最新版本5.9.0(截至至2019年7月10日)来代替Academic默认使用的5.6.0版本。&lt;/p&gt;

&lt;p&gt;我使用&lt;a href=&#34;https://cdnjs.com/libraries/font-awesome&#34; target=&#34;_blank&#34;&gt;cdnjs&lt;/a&gt;提供的CDN源，点击&lt;a href=&#34;https://cdnjs.com/libraries/font-awesome&#34; target=&#34;_blank&#34;&gt;此处&lt;/a&gt;查看当前最新版本。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;image/cdnjs-font-awesome.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;分别复制url和sri。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;image/cdnjs-font-awesome-copy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改到&lt;code&gt;themes/academic/data/assets.toml&lt;/code&gt;中。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[css.fontAwesome]
  version = &amp;quot;5.9.0&amp;quot;
  sri = &amp;quot;sha256-PF6MatZtiJ8/c9O9HQ8uSUXr++R9KBYu4gbNG5511WE=&amp;quot;
  url = &amp;quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/%s/css/all.css&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更新完成。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo博客集成Gitalk评论模块</title>
      <link>https://YuxinZhaozyx.github.io/post/gitalk-in-hugo/</link>
      <pubDate>Tue, 09 Jul 2019 16:40:32 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/post/gitalk-in-hugo/</guid>
      <description>

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;在&lt;a href=&#34;https://YuxinZhaozyx.github.io/post/gitment-in-hugo&#34;&gt;先前的文章&lt;/a&gt;中，我使用Gitment来作为我的博客的评论模块，但使用一段时间后发现了Gitment的一些缺点，针对这些缺点，我找到了比Gitment功能上更完善的Gitalk。&lt;/p&gt;

&lt;h2 id=&#34;我为什么选择gitalk&#34;&gt;我为什么选择Gitalk?&lt;/h2&gt;

&lt;p&gt;在这之前我先说一下我为什么弃坑Gitment，Gitment本身的想法很好，使用github的issue来存储评论，避免了使用第三方的服务而第三方停止提供服务的风险(比如多说和网易云跟帖)。但它也有以下缺点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不兼容移动端&lt;/li&gt;
&lt;li&gt;不支持多语言&lt;/li&gt;
&lt;li&gt;不支持免打扰模式&lt;/li&gt;
&lt;li&gt;不支持快捷键提交&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述问题中对我来说最重要并最终让我决定更换评论模块的是Gitment不兼容移动端的缺点。&lt;/p&gt;

&lt;p&gt;而Gitalk没有以上的缺点。&lt;/p&gt;

&lt;h2 id=&#34;gitalk评论模块介绍&#34;&gt;Gitalk评论模块介绍&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gitalk/gitalk&#34; target=&#34;_blank&#34;&gt;项目地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitalk.github.io/&#34; target=&#34;_blank&#34;&gt;官方示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;特性&#34;&gt;特性&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用 GitHub 登录&lt;/li&gt;
&lt;li&gt;支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru]&lt;/li&gt;
&lt;li&gt;支持个人或组织&lt;/li&gt;
&lt;li&gt;免干扰模式（设置 &lt;code&gt;distractionFreeMode&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 开启）&lt;/li&gt;
&lt;li&gt;快捷键提交评论 （&lt;code&gt;ctrl + enter&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;支持移动端&lt;/li&gt;
&lt;li&gt;自动初始化评论&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;基本使用&#34;&gt;基本使用&lt;/h2&gt;

&lt;h3 id=&#34;注册oauth-application&#34;&gt;注册OAuth Application&lt;/h3&gt;

&lt;p&gt;需要先在github上注册一个OAuth Application，&lt;a href=&#34;https://github.com/settings/applications/new&#34; target=&#34;_blank&#34;&gt;点击此处&lt;/a&gt;注册。&lt;/p&gt;

&lt;p&gt;Callback URL 填写评论页面对应的域名，如&lt;code&gt;https://YuxinZhaozyx.github.io&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    其他内容可以随便写，但Callback URL一定要填写正确。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;注册成功后会得到一个Client ID和Client Secret，这将被用于之后的用户登录认证。&lt;/p&gt;

&lt;h3 id=&#34;引入gitalk&#34;&gt;引入Gitalk&lt;/h3&gt;

&lt;p&gt;将以下代码添加到你的页面：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;section id=&amp;quot;comments&amp;quot;&amp;gt;
    &amp;lt;div id=&amp;quot;gitalkContainer&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
        var gitalk = new Gitalk({
            clientID: &#39;GitHub Application Client ID&#39;,
            clientSecret: &#39;GitHub Application Client Secret&#39;,
            repo: &#39;GitHub repo&#39;,
            owner: &#39;GitHub repo owner&#39;,
            admin: [&#39;GitHub repo owner and collaborators, only these guys can initialize github issues&#39;],
            id: location.pathname,      // Ensure uniqueness and length less than 50
            distractionFreeMode: false  // Facebook-like distraction free mode
        });
        gitalk.render(&#39;gitalkContainer&#39;);
    &amp;lt;/script&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;id&lt;/code&gt;的长度要限制在50个字符内，但也不可为空字符串。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&#34;参数说明&#34;&gt;参数说明&lt;/h4&gt;

&lt;p&gt;&lt;style type=&#34;text/css&#34;&gt;
    table.tableizer-table {
        font-size: 12px;
        table-layout: fixed;
        width: 100%;
        border-collapse: collapse;
    }
&lt;/style&gt;
&lt;table class=&#34;tableizer-table&#34;&gt;
&lt;thead&gt;
    &lt;tr class=&#34;tableizer-firstrow&#34;&gt;
        &lt;th&gt;参数&lt;/th&gt;
        &lt;th&gt;类型&lt;/th&gt;
        &lt;th&gt;可选&lt;/th&gt;
        &lt;th&gt;说明&lt;/th&gt;
        &lt;th&gt;默认值&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;clientID&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;no&lt;/td&gt;
        &lt;td&gt;GitHub Application Client ID&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;clientSecret&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;no&lt;/td&gt;
        &lt;td&gt;GitHub Application Client Secret&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;repo&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;no&lt;/td&gt;
        &lt;td&gt;存放评论的gitHub仓库&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;owner&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;no&lt;/td&gt;
        &lt;td&gt;存放评论的gitHub仓库的所有者&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;admin&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Array&lt;/td&gt;
        &lt;td&gt;no&lt;/td&gt;
        &lt;td&gt;允许初始化评论的用户（repo的所有者和合作者）&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;[ owner ]&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;id&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;yes&lt;/td&gt;
        &lt;td&gt;页面的唯一标识，长度必须小于50&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;location.href&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Number&lt;/td&gt;
        &lt;td&gt;yes&lt;/td&gt;
        &lt;td&gt;页面的issueID标识，若未定义number属性则使用id进行定位&lt;/td&gt;
        &lt;td&gt;-1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;labels&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Array&lt;/td&gt;
        &lt;td&gt;yes&lt;/td&gt;
        &lt;td&gt;GitHub issue的标签&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;[&#39;Gitalk&#39;]&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;title&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;yes&lt;/td&gt;
        &lt;td&gt;GitHub issue的标题&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;document.title&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;body&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;yes&lt;/td&gt;
        &lt;td&gt;GitHub issue的内容&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;location.href + header.meta[description]&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;language&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;yes&lt;/td&gt;
        &lt;td&gt;语言，支持[en, zh-CN, zh-TW]&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;navigator.language || navigator.userLanguage&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;perPage&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Number&lt;/td&gt;
        &lt;td&gt;yes&lt;/td&gt;
        &lt;td&gt;每次加载的评论数，最多100&lt;/td&gt;
        &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;distractionFreeMode&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Boolean&lt;/td&gt;
        &lt;td&gt;yes&lt;/td&gt;
        &lt;td&gt;类似Facebook评论框的全屏遮罩效果.&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;pagerDirection&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;yes&lt;/td&gt;
        &lt;td&gt;评论排序方式， &lt;code&gt;last&lt;/code&gt;为按评论创建时间倒叙，&lt;code&gt;first&lt;/code&gt;为按创建时间正序。&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;&#39;last&#39;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;createIssueManually&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Boolean&lt;/td&gt;
        &lt;td&gt;yes&lt;/td&gt;
        &lt;td width=50% nowrap&gt;如果当前页面没有相应的 issue 且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮。&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;proxy&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;yes&lt;/td&gt;
        &lt;td&gt;GitHub oauth请求到反向代理，为了支持CORS&lt;/td&gt;
        &lt;td nowrap&gt;&lt;a href=&#34;https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token&#34; target=&#34;_blank&#34;&gt;https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;flipMoveOptions&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Object&lt;/td&gt;
        &lt;td&gt;yes&lt;/td&gt;
        &lt;td&gt;评论的参考动画&lt;/td&gt;
        &lt;td&gt;
            &lt;code&gt;
            { &lt;br&gt;
            &amp;emsp; staggerDelayBy: 150, &lt;br&gt;
            &amp;emsp; appearAnimation: &amp;lsquo;accordionVertical&amp;rsquo;, &lt;br&gt;
            &amp;emsp; enterAnimation: &amp;lsquo;accordionVertical&amp;rsquo;, &lt;br&gt;
            &amp;emsp; leaveAnimation: &amp;lsquo;accordionVertical&amp;rsquo;, &lt;br&gt;
            }
            &lt;/code&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td nowrap&gt;&lt;code&gt;enableHotKey&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Boolean&lt;/td&gt;
        &lt;td&gt;yes&lt;/td&gt;
        &lt;td&gt;启用快捷键(cmd|ctrl + enter) 提交评论&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;h3 id=&#34;初始化评论&#34;&gt;初始化评论&lt;/h3&gt;

&lt;p&gt;Gitalk不需要像Gitment一样点初始化按钮初始化(除非将&lt;code&gt;createIssueManually&lt;/code&gt;选项设置为&lt;code&gt;true&lt;/code&gt;)，只需要&lt;code&gt;admin&lt;/code&gt;中的任何一名管理员登录账号即可自动初始化。&lt;/p&gt;

&lt;h2 id=&#34;gitalk在hugo-academic主题下的配置&#34;&gt;Gitalk在Hugo Academic主题下的配置&lt;/h2&gt;

&lt;p&gt;在hugo建立的根目录下创建目录&lt;code&gt;layouts/partials/&lt;/code&gt;，再在新创建的目录下创建&lt;code&gt;comments.html&lt;/code&gt;用于覆盖Academic主题的&lt;code&gt;comments.html&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd &amp;lt;your-hugo-website-root&amp;gt;
$ mkdir -p layouts/partials/
$ vi layouts/partials/comments.html
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    注意是在hugo建立的根目录而不是修改&lt;code&gt;themes/academic/&lt;/code&gt;主题下的文件。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;在&lt;code&gt;layouts/partials/comments.html&lt;/code&gt;中输入以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if eq .Site.Params.gitalk.on true }}
&amp;lt;section id=&amp;quot;comments&amp;quot;&amp;gt;
    &amp;lt;div id=&amp;quot;gitalkContainer&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script&amp;gt;
        var gitalk = new Gitalk({
            clientID: {{ .Site.Params.gitalk.clientID }},
            clientSecret: {{ .Site.Params.gitalk.clientSecret }},
            repo: {{ .Site.Params.gitalk.repo }},
            owner: {{ .Site.Params.gitalk.owner }},
            admin: {{ .Site.Params.gitalk.admin }},
            id: &#39;{{ .Params.Date }}&#39;,      // Ensure uniqueness and length less than 50
            labels: {{ .Site.Params.gitalk.labels }},
            distractionFreeMode: {{ .Site.Params.gitalk.distractionFreeMode }},  // Facebook-like distraction free mode
            pagerDirection: {{ .Site.Params.gitalk.pagerDirection }},
            createIssueManually: {{ .Site.Params.gitalk.createIssueManually }},
            enableHotKey: {{ .Site.Params.gitalk.enableHotKey }},
            flipMoveOptions: {
                staggerDelayBy: {{ .Site.Params.gitalk.flipMoveOptions.staggerDelayBy }},
                appearAnimation: {{ .Site.Params.gitalk.flipMoveOptions.appearAnimation }},
                enterAnimation: {{ .Site.Params.gitalk.flipMoveOptions.enterAnimation }},
                leaveAnimation: {{ .Site.Params.gitalk.flipMoveOptions.leaveAnimation }},
            },
        });
        gitalk.render(&#39;gitalkContainer&#39;);
    &amp;lt;/script&amp;gt;
&amp;lt;/section&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;code&gt;config/_default/params.toml&lt;/code&gt;末尾添加以下配置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Config comments of gitalk
[gitalk]
  on = true
  clientID = &amp;quot;ec5806c0144b70a1b32e&amp;quot;
  clientSecret = &amp;quot;aadae41a3747ffa5b36fd0e13c7e84026db07e0c&amp;quot;
  repo  = &amp;quot;YuxinZhaozyx.github.io&amp;quot;
  owner = &amp;quot;YuxinZhaozyx&amp;quot;
  admin = [&amp;quot;YuxinZhaozyx&amp;quot;]
  labels = [&amp;quot;Comments&amp;quot;]  # default to [&amp;quot;Gitalk&amp;quot;]
  distractionFreeMode = false
  pagerDirection = &#39;last&#39; # set to &#39;last&#39; or &#39;first&#39;
  createIssueManually = false
  enableHotKey = true  # cmd | ctrl + enter to commit comment
  [gitalk.flipMoveOptions]
    staggerDelayBy = 150
    appearAnimation = &#39;elevator&#39;
    enterAnimation = &#39;elevator&#39;
    leaveAnimation = &#39;elevator&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此，评论功能配置完成。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git merge命令提示Already up to date</title>
      <link>https://YuxinZhaozyx.github.io/post/git-merge-already-up-to-date/</link>
      <pubDate>Tue, 09 Jul 2019 14:45:33 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/post/git-merge-already-up-to-date/</guid>
      <description>

&lt;p&gt;假定我有两个分支&lt;code&gt;master&lt;/code&gt;和&lt;code&gt;dev&lt;/code&gt;。当前处在&lt;code&gt;dev&lt;/code&gt;分支。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git merge master
Already up to date.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cause-of-errors-错误原因&#34;&gt;Cause of Errors 错误原因&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Already up to date&lt;/code&gt;意味着已经是最新的了，即&lt;code&gt;dev&lt;/code&gt;是在&lt;code&gt;master&lt;/code&gt;的基础上修改的，而&lt;code&gt;master&lt;/code&gt;自分出&lt;code&gt;dev&lt;/code&gt;分支后就没修改过，因此&lt;code&gt;dev&lt;/code&gt;分支是最新的，不需要于&lt;code&gt;master&lt;/code&gt;合并，因为合并完的仓库和当前的&lt;code&gt;dev&lt;/code&gt;分支是一模一样的。&lt;/p&gt;

&lt;p&gt;其git分支图如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;                 E -- F -- G(dev)
                /
A -- B -- C -- D(master)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其等同于:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;A -- B -- C -- D(master) -- E -- F -- G(dev)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们想要做的合并实际上是将&lt;code&gt;master&lt;/code&gt;指向&lt;code&gt;dev&lt;/code&gt;而已。&lt;/p&gt;

&lt;h2 id=&#34;solution-解决方法&#34;&gt;Solution 解决方法&lt;/h2&gt;

&lt;p&gt;多提交一个空的&lt;code&gt;commit&lt;/code&gt;，使两条分支叉开，再合并。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;                 E -- F -- G(dev)
                /
A -- B -- C -- D -- H(master)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;                 E -- F -- G(dev)
                /           \
A -- B -- C -- D -- H ------ I(master)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上图中&lt;code&gt;H&lt;/code&gt;是一个不做任何修改的提交，其作用是将&lt;code&gt;master&lt;/code&gt;和&lt;code&gt;dev&lt;/code&gt;分到两个叉开的分支上，使得&lt;code&gt;master&lt;/code&gt;不再是&lt;code&gt;dev&lt;/code&gt;的父节点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;具体命令:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 移动到master分支下
$ git checkout master
# 在master提交一个空内容
$ git commit --allow-empty -m &amp;quot;ready for merging&amp;quot;
# 合并master和dev分支
$ git merge dev
# 移除dev指针(可选)
$ git branch --delete dev
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hugo博客集成Gitment评论模块</title>
      <link>https://YuxinZhaozyx.github.io/post/gitment-in-hugo/</link>
      <pubDate>Fri, 05 Jul 2019 17:20:59 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/post/gitment-in-hugo/</guid>
      <description>

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;我使用的Hugo主题Academic自带Disqus评论模块支持，但由于国内无法访问Disqus，因此我开始寻找其他评论模块，最终选择了Gitment评论模块。&lt;/p&gt;

&lt;h2 id=&#34;我为什么选择gitment&#34;&gt;我为什么选择Gitment？&lt;/h2&gt;

&lt;p&gt;在选择之前我们先看一下有哪些选项可以选择。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Disqus&lt;/strong&gt;:  国外使用较多的评论组件，但国内需要代理才能访问。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;多说&lt;/strong&gt;:  国内最多用户使用的评论系统，但已于2017年6月停止提供服务。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;网易云跟帖&lt;/strong&gt;:  网易提供的评论系统，但也于2017月8月停止提供服务。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;畅言&lt;/strong&gt;:  搜狐提供的评论组件，功能丰富，体验优异；但必须进行域名备案。只要域名备过案就可以通过审核，简单问题复杂化。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Gitment&lt;/strong&gt;:   国人&lt;a href=&#34;https://imsun.net/&#34; target=&#34;_blank&#34;&gt;I&amp;rsquo;m Sun&lt;/a&gt;编写的开源评论模块，创新性地将评论放置在github的issue中，作者目前已不再维护。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;CommentHub&lt;/strong&gt;:  受Gitment启发也是将评论存储在github issue中的评论系统，解决Gitment会在前端暴露Client ID和Client Secret可能造成的安全问题，改进成在后端服务处理业务和存储证书，通过iframe实现评论功能。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;已停止服务的多说、网易云跟帖和国内无法访问的Disqus无法使用，故排除在选择范围之外。畅言由于需要备案，步骤繁琐不想用。剩下的Gitment和ComementHub实际上很像，CommentHub看上去会更安全一些，因为它不会像Gitment一样暴露Client ID和Client Secret，但其实即便别人获取了我们的Client ID和Client Secret，没有我的github账号依然无法使用，而且只能在我指定的网址才能用，故Gitment还是比较安全的。&lt;/p&gt;

&lt;p&gt;最终我在两者中选择了Gitment (因为CommentHub有点难看)。&lt;/p&gt;

&lt;h2 id=&#34;gitment评论模块介绍&#34;&gt;Gitment评论模块介绍&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Gitment is a comment system based on GitHub Issues, which can be used in the frontend without any server-side implementation.&lt;/p&gt;

&lt;p&gt;Gitment 是一款基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/imsun/gitment&#34; target=&#34;_blank&#34;&gt;项目地址&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://imsun.github.io/gitment/&#34; target=&#34;_blank&#34;&gt;官方示例&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;基本使用&#34;&gt;基本使用&lt;/h2&gt;

&lt;h3 id=&#34;1-注册oauth-application&#34;&gt;1. 注册OAuth Application&lt;/h3&gt;

&lt;p&gt;需要先在github上注册一个OAuth Application，&lt;a href=&#34;https://github.com/settings/applications/new&#34; target=&#34;_blank&#34;&gt;点击此处&lt;/a&gt;注册。&lt;/p&gt;

&lt;p&gt;Callback URL 填写评论页面对应的域名，如&lt;code&gt;https://YuxinZhaozyx.github.io&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    其他内容可以随便写，但Callback URL一定要填写正确。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;注册成功后会得到一个Client ID和Client Secret，这将被用于之后的用户登录认证。&lt;/p&gt;

&lt;h3 id=&#34;2-引入gitment&#34;&gt;2. 引入Gitment&lt;/h3&gt;

&lt;p&gt;将以下代码添加到你的页面：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://imsun.github.io/gitment/style/default.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;https://imsun.github.io/gitment/dist/gitment.browser.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
var gitment = new Gitment({
  id: &#39;页面 ID&#39;, // 可选。默认为 location.href
  owner: &#39;你的 GitHub ID&#39;,
  repo: &#39;存储评论的 repo&#39;,
  oauth: {
    client_id: &#39;你的 client ID&#39;,
    client_secret: &#39;你的 client secret&#39;,
  },
})
gitment.render(&#39;container&#39;)
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;id&lt;/code&gt;的长度要限制在50个字符内，但也不可为空字符串。详情见&lt;a href=&#34;#问题汇总&#34;&gt;此处&lt;/a&gt;。
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;上述代码为gitment作者的示例代码，但作者已停止维护，网址已不可用，可用以下代码代替。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://www.wenjunjiang.win/css/gitment.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;https://www.wenjunjiang.win/js/gitment.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/gh/theme-next/theme-next-gitment@1/default.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/gh/theme-next/theme-next-gitment@1/gitment.browser.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目前来看后者更稳定一点。&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;以上方式会使用最新版本的Gitment，若希望引用确定版本的Gitment，需要使用npm进行安装。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npm install --save gitment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用操作详见&lt;a href=&#34;https://github.com/imsun/gitment#options&#34; target=&#34;_blank&#34;&gt;Gitment Option&lt;/a&gt;。&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;3-初始化评论&#34;&gt;3. 初始化评论&lt;/h3&gt;

&lt;p&gt;页面发布后，你需要访问页面并使用你的 GitHub 账号登录（请确保你的账号是第二步所填 repo 的 owner），点击初始化按钮。&lt;/p&gt;

&lt;p&gt;之后其他用户即可在该页面发表评论。&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    要先&lt;strong&gt;登录&lt;/strong&gt;才能初始化，未登录初始化前可能会显示&lt;code&gt;Error: Comments Not initialized&lt;/code&gt;错误，属正常现象。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;问题汇总&#34;&gt;问题汇总&lt;/h2&gt;

&lt;h3 id=&#34;1-error-not-found&#34;&gt;1. &lt;code&gt;Error: Not Found&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;owner或者repo配置错误，注意名字和参考名字的大小写。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;注意不可设置 &lt;code&gt;id : &amp;quot;&amp;quot;&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-error-comments-not-initialized&#34;&gt;2. &lt;code&gt;Error: Comments Not initialized&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;还没有登录，登录之后初始化就可以了。&lt;/li&gt;
&lt;li&gt;注册OAuth Application时Authorization Callback URL指定地址错误。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-error-validation-failed&#34;&gt;3. &lt;code&gt;Error: Validation Failed&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;太长，导致初始化失败。解决方案见问题4。

&lt;ul&gt;
&lt;li&gt;id`的长度要限制在50个字符内，但也不可为空字符串&lt;/li&gt;
&lt;li&gt;github issue的标签label有长度限制，label的最大长度为50个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;的作用是唯一标识每一篇文章。&lt;/li&gt;
&lt;li&gt;在gitment创建的issue里，每个issue有两个label，其中一个是&lt;code&gt;gitment&lt;/code&gt;，另一个是&lt;code&gt;id&lt;/code&gt;指定的值。因此&lt;code&gt;id&lt;/code&gt;受到label的限制。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4-在一篇文章下看到另一篇文章的issue&#34;&gt;4. 在一篇文章下看到另一篇文章的issue&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;两篇文章的&lt;code&gt;id&lt;/code&gt;重复&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;解决方案&#34;&gt;解决方案&lt;/h4&gt;

&lt;p&gt;将文章的&lt;code&gt;id&lt;/code&gt;设置为文章的创建时间，即可保证&lt;code&gt;id&lt;/code&gt;长度不超过50个字符且文章评论不重复。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  id: {{ .Params.Date }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    不要复制前面的某一篇论文而忘记修改时间，否则评论还是会交错的。
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;gitment的汉化版本&#34;&gt;Gitment的汉化版本&lt;/h2&gt;

&lt;p&gt;只需到模板里将原来定义CSS和JS的那两行改成：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://billts.site/extra_css/gitment.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;https://billts.site/js/gitment.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gitment在hugo-academic主题下的配置&#34;&gt;Gitment在Hugo Academic主题下的配置&lt;/h2&gt;

&lt;p&gt;在hugo建立的根目录下创建目录&lt;code&gt;layouts/partials/&lt;/code&gt;，再在新创建的目录下创建&lt;code&gt;comments.html&lt;/code&gt;用于覆盖Academic主题的&lt;code&gt;comments.html&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd &amp;lt;your-hugo-website-root&amp;gt;
$ mkdir -p layouts/partials/
$ vi layouts/partials/comments.html
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    注意是在hugo建立的根目录而不是修改&lt;code&gt;themes/academic/&lt;/code&gt;主题下的文件。
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;在&lt;code&gt;layouts/partials/comments.html&lt;/code&gt;中输入以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Site.Params.gitment.language }}
&amp;lt;section id=&amp;quot;comments&amp;quot;&amp;gt;
    &amp;lt;div id=&amp;quot;gitmentContainer&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    {{ if eq .Site.Params.gitment.language &amp;quot;zh&amp;quot; }}
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://billts.site/extra_css/gitment.css&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;https://billts.site/js/gitment.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    {{ else }}
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/gh/theme-next/theme-next-gitment@1/default.css&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/gh/theme-next/theme-next-gitment@1/gitment.browser.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    {{ end }}

    &amp;lt;script&amp;gt;
        var gitment = new Gitment({
            id: &#39;{{ .Params.Date }}&#39;,
            owner: {{ .Site.Params.gitment.owner }},
            repo: {{ .Site.Params.gitment.repo }},
            oauth: {
                client_id: {{ .Site.Params.gitment.clientID }},
                client_secret: {{ .Site.Params.gitment.clientSecret }},
            },
        });
        gitment.render(&#39;gitmentContainer&#39;);
    &amp;lt;/script&amp;gt;
&amp;lt;/section&amp;gt;

{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;code&gt;config/_default/params.toml&lt;/code&gt;末尾添加以下配置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Config comments of gitment
[gitment]
  language = &amp;quot;en&amp;quot; # set &amp;quot;&amp;quot; to disable comment, &amp;quot;zh&amp;quot; to Chinese, &amp;quot;en&amp;quot; to English
  owner = &amp;quot;&amp;lt;your-github-name&amp;gt;&amp;quot;
  repo  = &amp;quot;&amp;lt;the-repo-to-store-comments&amp;gt;&amp;quot;
  clientID = &amp;quot;&amp;lt;your-client-ID&amp;gt;&amp;quot;
  clientSecret = &amp;quot;&amp;lt;your-client-secret&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此，评论功能配置完成。&lt;/p&gt;

&lt;h2 id=&#34;参考引用&#34;&gt;参考引用&lt;/h2&gt;

&lt;p&gt;[1]  &lt;a href=&#34;https://imsun.net/posts/gitment-introduction/&#34; target=&#34;_blank&#34;&gt;Gitment：使用 GitHub Issues 搭建评论系统 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2]  &lt;a href=&#34;https://ihtcboy.com/2018/02/25/2018-02-25_Gitment评论功能接入踩坑教程/&#34; target=&#34;_blank&#34;&gt;Gitment评论功能接入踩坑教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3]  &lt;a href=&#34;https://github.com/imsun/gitment/issues/95&#34; target=&#34;_blank&#34;&gt;Error: Comments Not Initialized # 95&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[4]  &lt;a href=&#34;https://github.com/imsun/gitment/issues/116&#34; target=&#34;_blank&#34;&gt;Validation Failed ID长度问题建议 #116&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[5]  &lt;a href=&#34;https://github.com/imsun/gitment/issues/170&#34; target=&#34;_blank&#34;&gt;[object ProgressEvent] #170&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[6]  &lt;a href=&#34;https://github.com/imsun/gitment/issues/102&#34; target=&#34;_blank&#34;&gt;网站无法访问了？ #102&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GoMicroBookshop项目开发笔记-1</title>
      <link>https://YuxinZhaozyx.github.io/post/gomicrobookshop-project/dev-note-1/</link>
      <pubDate>Thu, 04 Jul 2019 23:23:03 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/post/gomicrobookshop-project/dev-note-1/</guid>
      <description>

&lt;h2 id=&#34;第一章-用户服务&#34;&gt;第一章 用户服务&lt;/h2&gt;

&lt;p&gt;本章节我们实现用户服务，用户服务分为两层，web层（user-web）与服务层（user-srv），前者提供http接口，后者向web提供RPC服务。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user-web 以下简称&lt;strong&gt;web&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;user-srv 以下简称&lt;strong&gt;service&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;web&lt;/strong&gt;服务主要向用户提供如下接口&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;登录与token颁发&lt;/li&gt;
&lt;li&gt;鉴权&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们不提供注册接口，一来增加不必要的代码量，我们的核心还是介绍如何使用Micro组件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;server&lt;/strong&gt;服务主要向所有内部服务提供用户查询接口：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;根据userName用户名查询用户&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在开发应用之前，我们要先定义好命名空间。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;服务&lt;/th&gt;
&lt;th&gt;命名空间&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;接入层API&lt;/td&gt;
&lt;td&gt;mu.micro.book.web&lt;/td&gt;
&lt;td&gt;负责代理所有&lt;strong&gt;mu.micro.book.web&lt;/strong&gt;下游的web应用，比如&lt;strong&gt;mu.micro.book.web.user&lt;/strong&gt;等&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;用户web&lt;/td&gt;
&lt;td&gt;mu.micro.book.web.user&lt;/td&gt;
&lt;td&gt;接收API下放的路由为/user请求&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;用户服务&lt;/td&gt;
&lt;td&gt;mu.micro.book.srv.user&lt;/td&gt;
&lt;td&gt;对架构内应用提供user查询服务&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/raw/master/image/part1_framework_namespace.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;user-srv&#34;&gt;user-srv&lt;/h3&gt;

&lt;p&gt;user-srv的各组件如下表所示&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;启动顺序&lt;/th&gt;
&lt;th&gt;组件&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;basic&lt;/td&gt;
&lt;td&gt;初始化配置与解析配置文件，初始化数据库等基础组件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;model&lt;/td&gt;
&lt;td&gt;模型层，提供业务数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;handler&lt;/td&gt;
&lt;td&gt;接入层，提供对外接口，并向model层调用请求数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Micro有提供代码生成器指令&lt;a href=&#34;https://github.com/micro-in-cn/all-in-one/tree/master/middle-practices/micro-new&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/a&gt;，它可以新建服务模板代码，把基本所需的目录结构建好，省去大家挖坑的时间。&lt;/p&gt;

&lt;h4 id=&#34;新建模板&#34;&gt;新建模板&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;micro new --namespace=mu.micro.book --type=srv --alias=user github.com/YuxinZhaozyx/GoMicroBookshop/user-srv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;模板生成在&lt;strong&gt;user-srv&lt;/strong&gt;目录，其结构如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── main.go
├── plugin.go
├── handler
│   └── user.go
├── subscriber
│   └── user.go
├── proto/user
│   └── user.proto
├── Dockerfile
├── Makefile
└── README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改后&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── main.go
├── plugin.go
├── basic
│   └── config               * 配置类
│   │   └── config.go        * 初始化配置类
│   │   └── consul.go        * consul配置结构体
│   │   └── mysql.go         * mysql配置结构体
│   │   └── profiles.go      * 配置文件树辅助类
│   └── db                   * 数据库相关
│   │    └── db.go           * 初始化数据库
│   │    └── mysql.go        * mysql数据库相关
│   └── basic.go             * 初始化基础组件
├── conf                     * 配置文件目录
├── handler
│   └── user.go              * 将名称改为user
├── model                    * 增加模型层，用于与数据库交换数据
│   └── user                 * 用户模型类
│   │   └── user.go          * 初始化用户模型类
│   │   └── user_get.go      * 封装获取用户数据类业务
│   └── model.go             * 初始化模型层
├── proto/user    
│   └── user.proto           * 将名称改为user
├── Dockerfile
├── Makefile
└── README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;目录解释：basic, model, conf&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;basic, model 目录与micro无关，只是为了实现MVC架构。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;basic&lt;/strong&gt; 负责初始化基础组件，比如数据库、配置等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;model&lt;/strong&gt; 负责封装业务逻辑&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;conf&lt;/strong&gt; 配置文件目录，现在我们还没用配置中心，暂先用文件的方式&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;定义user原型&#34;&gt;定义User原型&lt;/h4&gt;

&lt;p&gt;在user.proto中定义User原型，暂且定义以下字段，足够登录，显示用户基本信息、异常信息即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax = &amp;quot;proto3&amp;quot;;

package mu.micro.book.srv.user;

service User {
    rpc QueryUserByName(Request) returns (Response) {}
}

message user {
    int64 id = 1;
    string name = 2;
    string pwd = 3;
    uint64 createTime = 4;
    uint64 updateTime = 5;
}

message Error {
    int32 code = 1;
    string detail = 2;
}

message Request {
    string userID = 1;
    string userName = 2;
    string userPwd = 3;
}

message Response {
    bool success = 1;
    Error error = 2;
    user user = 3;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面定义了User服务的基本原型结构，包含用户&lt;strong&gt;User&lt;/strong&gt;，请求&lt;strong&gt;Request&lt;/strong&gt;与响应结构&lt;strong&gt;Response&lt;/strong&gt;，还定义了查询用户的方法&lt;strong&gt;QueryUserByName&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;下面我们生成类型与服务方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;protoc --proto_path=. --go_out=. --micro_out=. proto/user/user.proto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行后会生成 proto/user/user.micro.go 和 proto/user/user.pb.go 两个文件。&lt;/p&gt;

&lt;h4 id=&#34;数据库与配置&#34;&gt;数据库与配置&lt;/h4&gt;

&lt;h5 id=&#34;创建user表&#34;&gt;创建User表&lt;/h5&gt;

&lt;p&gt;选用MySQL作为数据库，以下是建表语句&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE `micro_book_mall` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin */;
USE `micro_book_mall`;

CREATE TABLE `user`
(
    `id`           int(10) unsigned                                              NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,
    `user_id`      int(10) unsigned                                                       DEFAULT NULL COMMENT &#39;用户id&#39;,
    `user_name`    varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci  NOT NULL COMMENT &#39;用户名&#39;,
    `pwd`          varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT &#39;密码&#39;,
    `created_time` timestamp(3)                                                  NOT NULL DEFAULT CURRENT_TIMESTAMP(3),
    `updated_time` timestamp(3)                                                  NOT NULL DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3),
    PRIMARY KEY (`id`),
    UNIQUE KEY `user_user_name_uindex` (`user_name`),
    UNIQUE KEY `user_user_id_uindex` (`user_id`)
) ENGINE = InnoDB
  DEFAULT CHARSET = utf8mb4
  COLLATE = utf8mb4_bin COMMENT =&#39;用户表&#39;;

INSERT INTO user (user_id, user_name, pwd) VALUE (10001, &#39;micro&#39;, &#39;1234&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;基本组件配置&#34;&gt;基本组件配置&lt;/h5&gt;

&lt;p&gt;基础组件(basic)目前主要的功能是初始化配置与数据库。它的入口代码(basic/basic.go)是一个&lt;strong&gt;Init&lt;/strong&gt;初始化方法，负责初始化其下所有组件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package basic

import (
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/config&amp;quot;
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/db&amp;quot;
)

func Init() {
    config.Init()
    db.Init()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;配置config&#34;&gt;配置config&lt;/h5&gt;

&lt;p&gt;加载配置我们会使用到&lt;a href=&#34;https://github.com/micro/go-micro/config&#34; target=&#34;_blank&#34;&gt;go-config&lt;/a&gt;里面的本地文件配置。相关示例可以参考&lt;a href=&#34;https://github.com/micro-in-cn/all-in-one/tree/master/basic-practices/micro-config&#34; target=&#34;_blank&#34;&gt;go-config示例&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;配置文件在 conf/ 文件夹下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;application.yml         # 根配置文件
application-db.yml      # 数据库配置文件
application-consul.yml  # consul服务发现配置文件
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根配置文件application.yml如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app:
  profiles:
    include: consul, db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起名为&lt;strong&gt;application.yml&lt;/strong&gt;是参考了Spring-boot风格。我们把consul和db配置分到独立的文件中。&lt;/p&gt;

&lt;p&gt;通过解析&lt;code&gt;app.profiles.include&lt;/code&gt;来加载指定的配置文件。当然也可以全部写在&lt;strong&gt;application.yml&lt;/strong&gt;中，只是我觉得挤在一起的配置不优雅。&lt;/p&gt;

&lt;p&gt;初始化配置的过程大致如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;顺序&lt;/th&gt;
&lt;th&gt;过程&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;加载application.yml&lt;/td&gt;
&lt;td&gt;读取conf目录下application.yml文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;解析profiles属性&lt;/td&gt;
&lt;td&gt;如果有该属性则找到include值，该值就是指定需要引入的conf下的配置文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;解析include&lt;/td&gt;
&lt;td&gt;解析出include配置【值】，并组合成文件名，文件名规则为[application-值.yml]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;读取include声明文件&lt;/td&gt;
&lt;td&gt;读取配置文件值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;解析配置&lt;/td&gt;
&lt;td&gt;将配置文件中的值解析到配置对象中&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;以下是它的核心代码(basic/config/config.go)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Init 初始化配置
func Init() {
    m.Lock()
    defer m.Unlock()

    if inited {
        log.Logf(&amp;quot;[Init] 配置已经初始化过&amp;quot;)
        return
    }

    // 加载yml配置
    // 先加载基础配置
    appPath, _ := filepath.Abs(filepath.Dir(filepath.Join(&amp;quot;.&amp;quot;+sp, sp)))

    pt := filepath.Join(appPath, &amp;quot;conf&amp;quot;)
    os.Chdir(appPath)

    // 找到application.yml文件
    if err = config.Load(file.NewSource(file.WithPath(pt + sp + &amp;quot;application.yml&amp;quot;))); err != nil {
        panic(err)
    }

    // 找到需要引入的新配置文件
    if err = config.Get(defaultRootPath, &amp;quot;profiles&amp;quot;).Scan(&amp;amp;profiles); err != nil {
        panic(err)
    }

    log.Logf(&amp;quot;[Init] 加载配置文件：path: %s, %+v\n&amp;quot;, pt+sp+&amp;quot;application.yml&amp;quot;, profiles)

    // 开始导入新文件
    if len(profiles.GetInclude()) &amp;gt; 0 {
        include := strings.Split(profiles.GetInclude(), &amp;quot;,&amp;quot;)

        sources := make([]source.Source, len(include))
        for i := 0; i &amp;lt; len(include); i++ {
            filePath := pt + string(filepath.Separator) + defaultConfigFilePrefix + strings.TrimSpace(include[i]) + &amp;quot;.yml&amp;quot;

            log.Logf(&amp;quot;[Init] 加载配置文件：path: %s\n&amp;quot;, filePath)

            sources[i] = file.NewSource(file.WithPath(filePath))
        }

        // 加载include的文件
        if err = config.Load(sources...); err != nil {
            panic(err)
        }
    }

    // 赋值
    config.Get(defaultRootPath, &amp;quot;consul&amp;quot;).Scan(&amp;amp;consulConfig)
    config.Get(defaultRootPath, &amp;quot;mysql&amp;quot;).Scan(&amp;amp;mysqlConfig)

    // 标记已经初始化
    inited = true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们目前定义了三个配置结构，它们在basic的&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/user-srv/basic/config&#34; target=&#34;_blank&#34;&gt;config&lt;/a&gt;目录下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/user-srv/basic/config/profiles.go&#34; target=&#34;_blank&#34;&gt;profiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/user-srv/basic/config/consul.go&#34; target=&#34;_blank&#34;&gt;consul&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/user-srv/basic/config/mysql.go&#34; target=&#34;_blank&#34;&gt;mysql&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// defaultProfiles 属性配置文件
type defaultProfiles struct {
Include string `json:&amp;quot;include&amp;quot;`
}

// defaultConsulConfig 默认consul 配置
type defaultConsulConfig struct {
Enabled bool   `json:&amp;quot;enabled&amp;quot;`
Host    string `json:&amp;quot;host&amp;quot;`
Port    int    `json:&amp;quot;port&amp;quot;`
}

// defaultMysqlConfig mysql 配置
type defaultMysqlConfig struct {
URL               string `json:&amp;quot;url&amp;quot;`
Enable            bool   `json:&amp;quot;enabled&amp;quot;`
MaxIdleConnection int    `json:&amp;quot;maxIdleConnection&amp;quot;`
MaxOpenConnection int    `json:&amp;quot;maxOpenConnection&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;数据库初始化&#34;&gt;数据库初始化&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;// user-srv/basic/db/db.go
package db

import (
    &amp;quot;database/sql&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;sync&amp;quot;

    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/config&amp;quot;
    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;
)

var (
    inited bool
    mysqlDB *sql.DB
    m sync.RWMutex
)

// Init 初始化数据库
func Init() {
    m.Lock()
    defer m.Unlock()

    var err error
    
    if inited{
        err = fmt.Errorf(&amp;quot;[Init] db 已经初始化过了&amp;quot;)
        log.Logf(err.Error())
        return
    }

    // 如果配置声明使用mysql
    if config.GetMysqlConfig().GetEnabled(){
        initMysql()
    }

    inited = true
}

// GetDB 获取数据库
func GetDB() *sql.DB {
    return mysqlDB
}
// user-srv/basic/db/mysql.go
package db

import (
    &amp;quot;database/sql&amp;quot;

    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/config&amp;quot;
    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;
    
    _ &amp;quot;github.com/go-sql-driver/mysql&amp;quot;
)

func initMysql() {
    var err error

    // 创建连接
    mysqlDB, err = sql.Open(&amp;quot;mysql&amp;quot;, config.GetMysqlConfig().GetURL())
    if err != nil {
        log.Fatal(err)
        panic(err)
    }

    // 最大连接数
    mysqlDB.SetMaxOpenConns(config.GetMysqlConfig().GetMaxOpenConnection())

    // 最大闲置数
    mysqlDB.SetMaxIdleConns(config.GetMysqlConfig().GetMaxIdleConnection())

    // 激活链接
    if err = mysqlDB.Ping(); err != nil {
        log.Fatal(err)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;用户模型服务&#34;&gt;用户模型服务&lt;/h4&gt;

&lt;p&gt;/user-srv/model/user/user.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package user

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;sync&amp;quot;

    proto &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user&amp;quot;
)

var (
    s *service
    m sync.RWMutex
)

// service 服务
type service struct {
}

// Service 用户服务类
type Service interface {
    // QueryUserByName 根据用户名获取用户
    QueryUserByName(userName string) (ret *proto.User, err error)
}

// GetService 获取服务类
func GetService() (Service, error) {
    if s == nil {
        return nil, fmt.Errorf(&amp;quot;[GetService] GetService 未初始化&amp;quot;)
    }
    return s, nil
}

// Init 初始化用户服务层
func Init() {
    m.Lock()
    defer m.Unlock()

    if s != nil {
        return
    }

    s = &amp;amp;service{}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/user-srv/model/user/user_get.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package user

import (
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/db&amp;quot;
    proto &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user&amp;quot;
    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;
)

func (s *service) QueryUserByName(userName string) (ret *proto.User, err error) {
    queryString := `SELECT user_id, user_name, pwd FROM user WHERE user_name = ?`

    // 获取数据库
    o := db.GetDB()

    ret = &amp;amp;proto.User{}

    // 查询
    err = o.QueryRow(queryString, userName).Scan(&amp;amp;ret.Id, &amp;amp;ret.Name, &amp;amp;ret.Pwd)
    if err != nil {
        log.Logf(&amp;quot;[QueryUserByName] 查询数据失败， err: %s&amp;quot;, err)
        return
    }
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/user-srv/model/model.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package model

import &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/model/user&amp;quot;

// Init 初始化模型层
func Init() {
    user.Init()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;handler&#34;&gt;Handler&lt;/h4&gt;

&lt;p&gt;/user-srv/handler/user.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package handler

import (
    &amp;quot;context&amp;quot;

    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;

    model &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/model/user&amp;quot;
    proto &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user&amp;quot;
)

type Service struct{}

var (
    userService model.Service
)

// Init 初始化handler
func Init() {
    var err error
    userService, err = model.GetService()
    if err != nil {
        log.Fatal(&amp;quot;[Init] 初始化Handler错误&amp;quot;)
        return
    }
}

// QueryUserByName 通过参数中的名字返回用户
func (e *Service) QueryUserByName(ctx context.Context, req *proto.Request, rsp *proto.Response) error {
    user, err := userService.QueryUserByName(req.UserName)
    if err != nil {
        rsp.Success = false
        rsp.Error = &amp;amp;proto.Error{
            Code:   500,
            Detail: err.Error(),
        }

        return err
    }

    rsp.User = user
    rsp.Success = true
    return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;handler直接调用模型层方法获取数据并回传给rsp结构。&lt;/p&gt;

&lt;h4 id=&#34;main&#34;&gt;main&lt;/h4&gt;

&lt;p&gt;main.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;

    &amp;quot;github.com/micro/cli&amp;quot;
    &amp;quot;github.com/micro/go-micro&amp;quot;
    &amp;quot;github.com/micro/go-micro/registry&amp;quot;
    &amp;quot;github.com/micro/go-micro/registry/consul&amp;quot;
    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;

    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic&amp;quot;
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/basic/config&amp;quot;
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/handler&amp;quot;
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/model&amp;quot;

    user &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user&amp;quot;
)

func main() {

    // 初始化配置、数据库等信息
    basic.Init()

    // 使用consul注册
    micReg := consul.NewRegistry(registryOptions)

    // New Service 新建服务
    service := micro.NewService(
        micro.Name(&amp;quot;mu.micro.book.srv.user&amp;quot;),
        micro.Registry(micReg),
        micro.Version(&amp;quot;latest&amp;quot;),
    )

    // Initialise service 初始化服务
    service.Init(
        micro.Action(func(c *cli.Context) {
            // 初始化模型层
            model.Init()
            // 初始化handler
            handler.Init()
        }),
    )

    // Register Handler 注册服务
    user.RegisterUserHandler(service.Server(), new(handler.Service))

    // Run service 启动服务
    if err := service.Run(); err != nil {
        log.Fatal(err)
    }
}

func registryOptions(ops *registry.Options) {
    consulCfg := config.GetConsulConfig()
    ops.Timeout = time.Second * 5
    ops.Addrs = []string{fmt.Sprintf(&amp;quot;%s:%d&amp;quot;, consulCfg.GetHost(), consulCfg.GetPort())}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码中我们默认使用consul作为注册中心，被在Action中初始化基础组件与模型层。&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    因为handler依赖model，所以初始化handler要在初始化模型层之后执行。
  &lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&#34;启动&#34;&gt;启动&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;启动consul&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;consul agent -dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;启动user-srv&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go run main.go plugin.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;2019/06/29 22:26:48 [Init] 加载配置文件：path: e:\go\src\github.com\YuxinZhaozyx\GoMicroBookshop\user-srv\conf\application.yml, {Include:consul, db}
2019/06/29 22:26:48 [Init] 加载配置文件：path: e:\go\src\github.com\YuxinZhaozyx\GoMicroBookshop\user-srv\conf\application-consul.yml
2019/06/29 22:26:48 [Init] 加载配置文件：path: e:\go\src\github.com\YuxinZhaozyx\GoMicroBookshop\user-srv\conf\application-db.yml
2019/06/29 22:26:48 Transport [http] Listening on [::]:56789
2019/06/29 22:26:48 Broker [http] Connected to [::]:56790
2019/06/29 22:26:48 Registry [consul] Registering node: mu.micro.book.srv.user-f51e60e1-cebf-4599-874c-8230d3113300
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;测试&#34;&gt;测试&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;micro --registry=consul call mu.micro.book.srv.user User.QueryUserByName &amp;quot;{\&amp;quot;userName\&amp;quot;: \&amp;quot;micro\&amp;quot;}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
        &amp;quot;success&amp;quot;: true,
        &amp;quot;user&amp;quot;: {
                &amp;quot;id&amp;quot;: 10001,
                &amp;quot;name&amp;quot;: &amp;quot;micro&amp;quot;,
                &amp;quot;pwd&amp;quot;: &amp;quot;1234&amp;quot;
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;user-srv服务搭建完成。&lt;/p&gt;

&lt;h3 id=&#34;user-web&#34;&gt;user-web&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;web&lt;/strong&gt;服务负责暴露接口给用户，用户请求登录，&lt;strong&gt;web&lt;/strong&gt;通过用户名&lt;strong&gt;userName&lt;/strong&gt;向&lt;strong&gt;service&lt;/strong&gt;获取用户信息，再比对密码，正确则登录成功，反之返回错误。&lt;/p&gt;

&lt;p&gt;请求链如下图&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/micro-in-cn/tutorials/blob/master/microservice-in-micro/docs/part1_user_login_process.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/raw/master/image/part1_user_login_process.png&#34; alt=&#34;img&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;新建模板-1&#34;&gt;新建模板&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;micro new --namespace=mu.micro.book --type=web --alias=user github.com/YuxinZhaozyx/GoMicroBookshop/user-web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;目录树&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;生成的目录树&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── main.go
├── plugin.go
├── handler
│   └── handler.go
├── html
│   └── index.html
├── Dockerfile
├── Makefile
└── README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改后：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── main.go
├── plugin.go
├── basic
│   └── config
│   │   └── config.go
│   │   └── consul.go
│   │   └── profiles.go
│   └── basic.go
├── conf
│   └── application.yml
│   └── application-consul.yml
├── handler
│   └── handler.go
├── Dockerfile
├── Makefile
└── README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go-web是一个很简单的web开发库，它不像其它go语言的web框架有那么多工具集，它核心在两个方面&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;让程序支持http请求&lt;/li&gt;
&lt;li&gt;天生属于Micro生态&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;它不需要额外的代码就可以注册到Micro生态中，和其它类型的服务一样。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;web&lt;/strong&gt;核心有三个地方&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/user-web/basic/config/config.go&#34; target=&#34;_blank&#34;&gt;config.go&lt;/a&gt; 负责加载配置&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/user-web/handler/handler.go&#34; target=&#34;_blank&#34;&gt;handler.go&lt;/a&gt; 负责处理请求&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/user-web/main.go&#34; target=&#34;_blank&#34;&gt;main.go&lt;/a&gt; 程序运行入口&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;config&#34;&gt;config&lt;/h4&gt;

&lt;p&gt;设置类似user-srv的设置，但去除mysql的配置。&lt;/p&gt;

&lt;p&gt;user-web/basic/config/config.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package config

import (
    &amp;quot;os&amp;quot;
    &amp;quot;path/filepath&amp;quot;
    &amp;quot;strings&amp;quot;
    &amp;quot;sync&amp;quot;

    &amp;quot;github.com/micro/go-micro/config&amp;quot;
    &amp;quot;github.com/micro/go-micro/config/source&amp;quot;
    &amp;quot;github.com/micro/go-micro/config/source/file&amp;quot;
    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;
)

var (
    err error
)

var (
    defaultRootPath         = &amp;quot;app&amp;quot;
    defaultConfigFilePrefix = &amp;quot;application-&amp;quot;
    consulConfig            defaultConsulConfig
    profiles                defaultProfiles
    m                       sync.RWMutex
    inited                  bool
)

// Init 初始化配置
func Init() {
    m.Lock()
    defer m.Unlock()

    if inited {
        log.Logf(&amp;quot;[Init] 配置已经初始化过&amp;quot;)
        return
    }

    // 加载yml配置
    // 先加载基础配置
    appPath, _ := filepath.Abs(filepath.Dir(filepath.Join(&amp;quot;./&amp;quot;, string(filepath.Separator))))

    pt := filepath.Join(appPath, &amp;quot;conf&amp;quot;)
    os.Chdir(appPath)

    // 找到application.yml文件
    if err = config.Load(file.NewSource(file.WithPath(pt + &amp;quot;/application.yml&amp;quot;))); err != nil {
        panic(err)
    }

    // 找到需要引入的新配置文件
    if err = config.Get(defaultRootPath, &amp;quot;profiles&amp;quot;).Scan(&amp;amp;profiles); err != nil {
        panic(err)
    }

    log.Logf(&amp;quot;[Init] 加载配置文件：path: %s, %+v\n&amp;quot;, pt+&amp;quot;/application.yml&amp;quot;, profiles)

    // 开始导入新文件
    if len(profiles.GetInclude()) &amp;gt; 0 {
        include := strings.Split(profiles.GetInclude(), &amp;quot;,&amp;quot;)

        sources := make([]source.Source, len(include))
        for i := 0; i &amp;lt; len(include); i++ {
            filePath := pt + string(filepath.Separator) + defaultConfigFilePrefix + strings.TrimSpace(include[i]) + &amp;quot;.yml&amp;quot;

            log.Logf(&amp;quot;[Init] 加载配置文件：path: %s\n&amp;quot;, filePath)

            sources[i] = file.NewSource(file.WithPath(filePath))
        }

        // 加载include的文件
        if err = config.Load(sources...); err != nil {
            panic(err)
        }
    }

    // 赋值
    config.Get(defaultRootPath, &amp;quot;consul&amp;quot;).Scan(&amp;amp;consulConfig)

    // 标记已经初始化
    inited = true
}

// GetConsulConfig 获取Consul配置
func GetConsulConfig() (ret ConsulConfig) {
    return consulConfig
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;user-web/basic/config/consul.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package config

// ConsulConfig consul 配置
type ConsulConfig interface {
    GetEnabled() bool
    GetPort() int
    GetHost() string
}

// defaultConsulConfig 默认consul 配置
type defaultConsulConfig struct {
    Enabled bool   `json:&amp;quot;enabled&amp;quot;`
    Host    string `json:&amp;quot;host&amp;quot;`
    Port    int    `json:&amp;quot;port&amp;quot;`
}

// GetPort consul 端口
func (c defaultConsulConfig) GetPort() int {
    return c.Port
}

// GetEnabled consul 激活
func (c defaultConsulConfig) GetEnabled() bool {
    return c.Enabled
}

// GetHost consul 主机地址
func (c defaultConsulConfig) GetHost() string {
    return c.Host
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;user-web/basic/config/profiles.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package config

// Profiles 属性配置文件
type Profiles interface {
    GetInclude() string
}

// defaultProfiles 属性配置文件
type defaultProfiles struct {
    Include string `json:&amp;quot;include&amp;quot;`
}

// Include 包含的配置文件
// 名称前缀为&amp;quot;application-&amp;quot;，格式为yml，如：&amp;quot;application-xxx.yml&amp;quot;
// 多个文件名以逗号隔开，并省略掉前缀&amp;quot;application-&amp;quot;，如：dn, jpush, mysql
func (p defaultProfiles) GetInclude() string {
    return p.Include
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;handler-1&#34;&gt;handler&lt;/h4&gt;

&lt;p&gt;user-web/handler/handler.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package handler

import (
    &amp;quot;context&amp;quot;
    &amp;quot;encoding/json&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;time&amp;quot;

    user &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-srv/proto/user&amp;quot;
    &amp;quot;github.com/micro/go-micro/client&amp;quot;
    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;
)

var (
    serviceClient user.UserService
)

// Error 错误结构体
type Error struct {
    Code   string `json:&amp;quot;code&amp;quot;`
    Detail string `json:&amp;quot;detail&amp;quot;`
}

func Init() {
    serviceClient = user.NewUserService(&amp;quot;mu.micro.book.srv.user&amp;quot;, client.DefaultClient)
}

// Login 登录入口
func Login(w http.ResponseWriter, r *http.Request) {
    // 只接受POST请求
    if r.Method != &amp;quot;POST&amp;quot; {
        log.Logf(&amp;quot;非法请求&amp;quot;)
        http.Error(w, &amp;quot;非法请求&amp;quot;, 400)
        return
    }

    r.ParseForm()

    // 调用后台服务
    rsp, err := serviceClient.QueryUserByName(context.TODO(), &amp;amp;user.Request{
        UserName: r.Form.Get(&amp;quot;userName&amp;quot;),
    })
    if err != nil {
        http.Error(w, err.Error(), 500)
        return
    }

    // 返回结果
    response := map[string]interface{}{
        &amp;quot;ref&amp;quot;: time.Now().UnixNano(),
    }

    if rsp.User.Pwd == r.Form.Get(&amp;quot;pwd&amp;quot;) {
        response[&amp;quot;success&amp;quot;] = rsp.Success

        // 干掉密码返回
        rsp.User.Pwd = &amp;quot;&amp;quot;
        response[&amp;quot;data&amp;quot;] = rsp.User
    } else {
        response[&amp;quot;success&amp;quot;] = false
        response[&amp;quot;error&amp;quot;] = &amp;amp;Error{
            Detail: &amp;quot;密码错误&amp;quot;,
        }
    }

    w.Header().Add(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json; charset=utf-8&amp;quot;)

    // encode and write the response as json 返回json结构
    if err := json.NewEncoder(w).Encode(response); err != nil {
        http.Error(w, err.Error(), 500)
        return
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;main-1&#34;&gt;main&lt;/h4&gt;

&lt;p&gt;user-web/main.go&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;

    &amp;quot;github.com/micro/go-micro/util/log&amp;quot;

    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-web/basic&amp;quot;
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-web/basic/config&amp;quot;
    &amp;quot;github.com/YuxinZhaozyx/GoMicroBookshop/user-web/handler&amp;quot;
    &amp;quot;github.com/micro/cli&amp;quot;
    &amp;quot;github.com/micro/go-micro/registry&amp;quot;
    &amp;quot;github.com/micro/go-micro/registry/consul&amp;quot;
    &amp;quot;github.com/micro/go-micro/web&amp;quot;
)

func main() {
    // 初始化配置
    basic.Init()

    // 使用consul注册
    micReg := consul.NewRegistry(registryOptions)

    // create new web service 创建新服务
    service := web.NewService(
        web.Name(&amp;quot;mu.micro.book.web.user&amp;quot;),
        web.Version(&amp;quot;latest&amp;quot;),
        web.Registry(micReg),
        web.Address(&amp;quot;:8088&amp;quot;),
    )

    // initialise service 初始化服务
    if err := service.Init(
        web.Action(func(c *cli.Context) {
            // 初始化handler
            handler.Init()
        }),
    ); err != nil {
        log.Fatal(err)
    }

    // register call handler 注册登录接口
    service.HandleFunc(&amp;quot;/user/login&amp;quot;, handler.Login)

    // run service 运行服务
    if err := service.Run(); err != nil {
        log.Fatal(err)
    }
}

func registryOptions(ops *registry.Options) {
    consulCfg := config.GetConsulConfig()
    ops.Timeout = time.Second * 5
    ops.Addrs = []string{fmt.Sprintf(&amp;quot;%s:%d&amp;quot;, consulCfg.GetHost(), consulCfg.GetPort())}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;handler里定义了错误结构体&lt;strong&gt;Error&lt;/strong&gt;、&lt;strong&gt;Init&lt;/strong&gt;、&lt;strong&gt;Login&lt;/strong&gt;方法。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Init&lt;/strong&gt; 用来初始化handler需要用到的服务客户端&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Login&lt;/strong&gt; 处理登录请求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Login&lt;/strong&gt;在解析完参数后，通过RPC调用&lt;strong&gt;service&lt;/strong&gt;的&lt;strong&gt;QueryUserByName&lt;/strong&gt;方法。查出的结果后再进行密码匹配。&lt;/p&gt;

&lt;p&gt;匹配成功后便返回用户信息。&lt;/p&gt;

&lt;h4 id=&#34;启动-1&#34;&gt;启动&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;启动consul&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;consul agent -dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;运行api&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;micro --registry=consul --api_namespace=mu.micro.book.web  api --handler=web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;运行user-srv&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd user-srv
go run main.go plugin.go 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;运行user-web&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd user-web
go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;测试-1&#34;&gt;测试&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl --request POST --url http://127.0.0.1:8088/user/login --header &amp;quot;Content-Type:application/x-www-form-urlencoded&amp;quot; --data &amp;quot;userName=micro&amp;amp;pwd=1234&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;错误输出：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;id&amp;quot;:&amp;quot;go.micro.client&amp;quot;,&amp;quot;code&amp;quot;:500,&amp;quot;detail&amp;quot;:&amp;quot;connection error: dial tcp: address fdf5:da13:de04::e58:59504: too many colons in address&amp;quot;,&amp;quot;status&amp;quot;:&amp;quot;Internal Server Error&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go-micro暂不支持ipv6，待解决。&lt;/p&gt;

&lt;p&gt;正确输出：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;data&amp;quot;:{&amp;quot;id&amp;quot;:10001,&amp;quot;name&amp;quot;:&amp;quot;micro&amp;quot;},&amp;quot;ref&amp;quot;:1561869942897349500,&amp;quot;success&amp;quot;:true}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;隔日重启后各服务分配到的是ipv4而不是ipv6地址，程序正常执行，未找到原因，待解决。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GoMicroBookshop项目开发笔记-0</title>
      <link>https://YuxinZhaozyx.github.io/post/gomicrobookshop-project/dev-note-0/</link>
      <pubDate>Thu, 04 Jul 2019 23:02:54 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/post/gomicrobookshop-project/dev-note-0/</guid>
      <description>

&lt;h1 id=&#34;项目简介&#34;&gt;项目简介&lt;/h1&gt;

&lt;h2 id=&#34;业务模块&#34;&gt;业务模块&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户&lt;/strong&gt;，users&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;库存&lt;/strong&gt;，inventory&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;权限&lt;/strong&gt;，auth&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;订单&lt;/strong&gt;，orders&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支付&lt;/strong&gt;，payment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;服务抽象结构&#34;&gt;服务抽象结构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/raw/master/image/design.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;用户、订单、支付服务都会有对外暴露接口，故而它们各自有web层。web层app之间不会互相调用，它们只会与非web层的应用交互。&lt;/p&gt;

&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Golang环境 &lt;a href=&#34;https://golang.google.cn/&#34; target=&#34;_blank&#34;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gRPC &lt;a href=&#34;https://grpc.io/docs/quickstart/go.html&#34; target=&#34;_blank&#34;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Consul&lt;/li&gt;
&lt;li&gt;Micro&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## 安装go-micro
go get github.com/micro/go-micro

## 安装micro
go get github.com/micro/micro
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;mysql&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有其它一些会用到的库或组件，但不是基础依赖，需要时再安装。&lt;/p&gt;

&lt;h2 id=&#34;涉及技术与库&#34;&gt;涉及技术与库&lt;/h2&gt;

&lt;p&gt;Golang，gRPC，Mysql，Redis，Docker，K8s，Go-micro/Micro&lt;/p&gt;

&lt;h2 id=&#34;搭建平台&#34;&gt;搭建平台&lt;/h2&gt;

&lt;p&gt;win10&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>$\LaTeX$ Math Symbols</title>
      <link>https://YuxinZhaozyx.github.io/post/latex-math-symbols/</link>
      <pubDate>Thu, 04 Jul 2019 20:04:20 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/post/latex-math-symbols/</guid>
      <description>

&lt;p&gt;Summary of LaTeX Math Symbols&lt;/p&gt;

&lt;p&gt;$\LaTeX$数学符号汇总&lt;/p&gt;

&lt;h2 id=&#34;function-symbol-and-special-characters-函数-符号及特殊字符&#34;&gt;Function, symbol and special characters 函数、符号及特殊字符&lt;/h2&gt;

&lt;h3 id=&#34;tone-声调&#34;&gt;Tone 声调&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\bar{x}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\bar{x}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\acute{\eta}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\acute{\eta}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\check{\alpha}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\check{\alpha}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\grave{\eta}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\grave{\eta}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\breve{a}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\breve{a}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ddot{y}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ddot{y}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\dot{x}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\dot{x}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\hat{\alpha}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\hat{\alpha}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\tilde{\iota}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\tilde{\iota} $$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;function-函数&#34;&gt;Function 函数&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sin\theta&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sin\theta$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\cos\theta&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\cos\theta$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\tan\theta&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\tan\theta$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\arcsin\frac{L}{r}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\arcsin\frac{L}{r}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\arccos\frac{T}{r}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\arccos\frac{T}{r}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\arctan\frac{L}{T}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\arctan\frac{L}{T}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sinh g&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sinh g$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\cosh h&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\cosh h$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\tanh i&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\tanh i$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\operatorname{sh}j&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\operatorname{sh}j$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\operatorname{argsh}k&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\operatorname{argsh}k$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\operatorname{ch}h&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\operatorname{ch}h$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\operatorname{argch}l&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\operatorname{argch}l$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\operatorname{th}i&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\operatorname{th}i$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\operatorname{argth}m&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\operatorname{argth}m$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;k&#39;(x)=\lim_{\Delta x\to 0}\frac{k(x)-k(x-\Delta x)}{\Deltax}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$k&amp;rsquo;(x)=\lim_{\Delta x\to 0}\frac{k(x)-k(x-\Delta x)}{\Delta}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\limsup S&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\limsup S$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\liminf I&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\liminf I$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\max H&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\max H$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\min L&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\min L$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\inf s&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\inf s$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sup t&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sup t$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\exp t&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\exp t$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ln X&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ln X$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\lg X&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\lg X$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\log X&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\log X$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\log_\alpha X&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\log_\alpha X$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ker x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ker x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\deg x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\deg x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\gcd(T,U,V,W,X)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\gcd(T,U,V,W,X)$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\Pr x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\Pr x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\det x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\det x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\hom x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\hom x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\arg x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\arg x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\dim x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\dim x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\lim_{t\to n}T&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\lim_{t\to n}T$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;congruent-同余&#34;&gt;Congruent 同余&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\pmod{m}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\pmod{m}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;a \bmod b&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$a \bmod b$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;differential-微分&#34;&gt;Differential 微分&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\nabla&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\nabla$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\partial x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\partial x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\mathrm{d}x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\mathrm{d}x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\dot x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\dot x$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ddot x&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ddot x$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;set-集合&#34;&gt;Set 集合&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\forall&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\forall$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\exists&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\exists$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\emptyset&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\emptyset$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\varnothing&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\varnothing$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ni&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ni$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\not\in&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\not\in$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\notin&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\notin$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\subset&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\subset$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\supset&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\supset$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\supseteq&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\supseteq$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\cap&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\cap$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\bigcap&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\bigcap$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\bigcap&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\bigcap$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\biguplus&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\biguplus$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqsubset&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqsubset$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqsubseteq&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqsubseteq$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqsupseteq&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqsupseteq$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqcap&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqcap$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqcup&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqcup$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\bigsqcup&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\bigsqcup$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;logic-逻辑&#34;&gt;Logic 逻辑&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$p$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\land&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\land$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\wedge&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\wedge$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\bigwedge&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\bigwedge$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\bar{q} \to p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\bar{q} \to p$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\lor&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\lor$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\vee&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\vee$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\bigvee&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\bigvee$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\lnot&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\lnot$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\neg q&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\neg q$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\setminus&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\setminus$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\smallsetminus&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\smallsetminus$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;radication-开方&#34;&gt;Radication  开方&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqrt{3}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqrt{3}$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqrt[n]{3}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqrt[n]{3}$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;relation-关系&#34;&gt;Relation 关系&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Syntax 语法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Effect 效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\Delta ABC\sim\Delta XYZ&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\Delta ABC\sim\Delta XYZ$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\sqrt{3}\approx1.732050808\ldots&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\sqrt{3}\approx1.732050808\ldots$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\simeq&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\simeq$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\cong&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\cong$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\dot=&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\dot=$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ggg&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ggg$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\gg&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\gg$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$&amp;gt;$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ge&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ge$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\geqq&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\geqq$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$=$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\leq&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\leq$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\leqq&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\leqq$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$&amp;lt;$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\ll&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\ll$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\lll&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\lll$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;(x-y)^2\equiv(-x+y)^2\equiv x^2-2xy+y^2&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$(x-y)^2\equiv(-x+y)^2\equiv x^2-2xy+y^2$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x\not\equiv N&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$x\not\equiv N$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x\ne A&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$x\ne A$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x\neq C&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$x\neq C$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;t\propto v&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$t\propto v$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\pm&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\pm$$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\mp&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$$\mp$$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    To be continue   未完待续
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>GoMicroBookshop</title>
      <link>https://YuxinZhaozyx.github.io/project/gomicrobookshop/</link>
      <pubDate>Thu, 04 Jul 2019 12:27:03 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/project/gomicrobookshop/</guid>
      <description>

&lt;p&gt;A bookshop project for my go-micro and micro service learning.&lt;/p&gt;

&lt;p&gt;本项目依据项目 &lt;a href=&#34;https://github.com/micro-in-cn/tutorials/tree/master/microservice-in-micro&#34; target=&#34;_blank&#34;&gt;microservice-in-cn&lt;/a&gt; 学习&lt;a href=&#34;https://github.com/micro/micro&#34; target=&#34;_blank&#34;&gt;micro&lt;/a&gt;工具链以及微服务。&lt;/p&gt;

&lt;h1 id=&#34;项目简介&#34;&gt;项目简介&lt;/h1&gt;

&lt;p&gt;本项目为一个网上书店。&lt;/p&gt;

&lt;h2 id=&#34;业务模块&#34;&gt;业务模块&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户&lt;/strong&gt;，users&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;库存&lt;/strong&gt;，inventory&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;权限&lt;/strong&gt;，auth&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;订单&lt;/strong&gt;，orders&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支付&lt;/strong&gt;，payment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;服务抽象结构&#34;&gt;服务抽象结构&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/YuxinZhaozyx/GoMicroBookshop/blob/master/image/design.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;image/design.png&#34; alt=&#34;img&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;用户、订单、支付服务都会有对外暴露接口，故而它们各自有web层。web层app之间不会互相调用，它们只会与非web层的应用交互。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://YuxinZhaozyx.github.io/authors/yuxinzhao/</link>
      <pubDate>Mon, 15 Jul 2019 11:07:26 +0800</pubDate>
      
      <guid>https://YuxinZhaozyx.github.io/authors/yuxinzhao/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a college student of software engineering at the South China University of Technology. My research interests include artificial intelligence, micro service and engineering.&lt;/p&gt;

&lt;p&gt;我是华南理工大学软件工程专业的一名大学生。我的研究兴趣包括人工智能、微服务和软件工程。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
